#version 450
#extension GL_GOOGLE_include_directive : require

#define GROUP_SIZE 8
#define GROUP_SIZE_3 (GROUP_SIZE * GROUP_SIZE * GROUP_SIZE)
layout(local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE, local_size_z = GROUP_SIZE) in;

#include "../include/svoBuilderDescriptorSetLayouts.glsl"

#include "../include/core/packer.glsl"

#include "../include/blockTypeAndWeight.glsl"

#define SHARED_SIZE (GROUP_SIZE + 1)
#define SHARED_SIZE_3 (SHARED_SIZE * SHARED_SIZE * SHARED_SIZE)

shared uint sharedFieldData[SHARED_SIZE][SHARED_SIZE][SHARED_SIZE];

uint compressNormal(vec3 normal) {
  // scale and bias from [-1, 1] to [0, 127]
  uvec3 quantized = uvec3(((normal + 1) * 0.5) * 127.0);

  // pack the 7-bit components into a single uint
  uint packed = (quantized.r) | (quantized.g << 7) | (quantized.b << 14);

  return packed;
}

void preload() {
  for (uint linearIdx = gl_LocalInvocationIndex; linearIdx < SHARED_SIZE_3;
       linearIdx += GROUP_SIZE_3) {

    uvec3 sharedIdx;
    sharedIdx.x = linearIdx % SHARED_SIZE;
    sharedIdx.y = (linearIdx / SHARED_SIZE) % SHARED_SIZE;
    sharedIdx.z = linearIdx / (SHARED_SIZE * SHARED_SIZE);

    ivec3 groupBase = ivec3(gl_WorkGroupID) * GROUP_SIZE;
    uint val        = imageLoad(chunkFieldImage, groupBase + ivec3(sharedIdx)).x;
    sharedFieldData[sharedIdx.x][sharedIdx.y][sharedIdx.z] = val;
  }
}

const ivec3 lookupOffsets[8] =
    ivec3[8](ivec3(0, 0, 0), ivec3(1, 0, 0), ivec3(0, 1, 0), ivec3(1, 1, 0), ivec3(0, 0, 1),
             ivec3(1, 0, 1), ivec3(0, 1, 1), ivec3(1, 1, 1));

bool atInterface(out uint oDensiestBlockType, uint[8] blockTypeData) {
  oDensiestBlockType     = kBlockTypeEmpty;
  uint lightestBlockType = kBlockTypeMax;

  for (int i = 0; i < 8; i++) {
    uint blockType = blockTypeData[i];
    if (blockType > oDensiestBlockType) {
      oDensiestBlockType = blockType;
    }
    if (blockType < lightestBlockType) {
      lightestBlockType = blockType;
    }
  }
  // return hasEmpty && hasFull;
  return lightestBlockType == kBlockTypeEmpty && oDensiestBlockType != kBlockTypeEmpty;
}

vec3 getNormalByWeight(float[8] weightData) {
  vec3 normal;
  normal.x = ((weightData[0] + weightData[2] + weightData[4] + weightData[6]) -
              (weightData[1] + weightData[3] + weightData[5] + weightData[7])) *
             0.25;
  normal.y = ((weightData[0] + weightData[1] + weightData[4] + weightData[5]) -
              (weightData[2] + weightData[3] + weightData[6] + weightData[7])) *
             0.25;
  normal.z = ((weightData[0] + weightData[1] + weightData[2] + weightData[3]) -
              (weightData[4] + weightData[5] + weightData[6] + weightData[7])) *
             0.25;
  return normalize(normal);
}

void main() {
  preload();
  barrier();

  ivec3 uvi = ivec3(gl_GlobalInvocationID);
  if (any(greaterThanEqual(uvi, ivec3(fragmentListInfoBuffer.data.voxelResolution)))) {
    return;
  }

  uint blockTypeData[8];
  float weightData[8];
  for (int i = 0; i < 8; i++) {
    ivec3 p   = ivec3(gl_LocalInvocationID) + lookupOffsets[i];
    uint data = sharedFieldData[p.x][p.y][p.z];
    unpackBlockTypeAndWeight(blockTypeData[i], weightData[i], data);
  }

  uint densistBlockType;
  if (!atInterface(densistBlockType, blockTypeData)) {
    return;
  }

  uint fragmentListCur = atomicAdd(fragmentListInfoBuffer.data.voxelFragmentCount, 1);

  // position
  G_FragmentListEntry ufragment;
  uint coordinatesData = uvi.x;
  coordinatesData |= uvi.y << 10;
  coordinatesData |= uvi.z << 20;
  ufragment.coordinates = coordinatesData;

  // color and normal
  vec3 normal = getNormalByWeight(weightData);

  uint propertiesData = 0;
  propertiesData |= densistBlockType & 0xFF;
  propertiesData |= compressNormal(normal) << 8;
  ufragment.properties = propertiesData;

  fragmentListBuffer.datas[fragmentListCur] = ufragment;
}

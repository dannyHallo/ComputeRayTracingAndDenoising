#version 450
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

#include "../include/svoBuilderDescriptorSetLayouts.glsl"

#include "../include/core/cnoise.glsl"
#include "../include/core/packer.glsl"


float computeNoise(vec3 p) {
  float total       = 0.0;
  float amplitude   = 0.15;
  float frequency   = 2.0;
  float persistence = 0.4;
  float lacunarity  = 2.2;
  int octaves       = 4;

  for (int i = 0; i < octaves; i++) {
    total += cnoise(p * frequency) * amplitude;
    frequency *= lacunarity;
    amplitude *= persistence;
  }

  return total;
}

void main() {
  if (any(greaterThanEqual(gl_GlobalInvocationID,
                           ivec3(fragmentListInfoBuffer.data.voxelResolution + 1)))) {
    return;
  }

  ivec3 uvi = ivec3(gl_GlobalInvocationID);

  uvec3 currentlyWritingChunk = chunksInfoBuffer.data.currentlyWritingChunk;
  ivec3 chunkPosition =
      ivec3(currentlyWritingChunk) - ivec3((chunksInfoBuffer.data.chunksDim - 1) / 2);

  vec3 noiseLookupPos =
      vec3(chunkPosition) + vec3(uvi) / float(fragmentListInfoBuffer.data.voxelResolution);

  const float floorHeightMean = 0.0;
  const float floorChangeVar  = 2.5;
  float yPosition             = float(chunkPosition.y) - 0.5 +
                    float(uvi.y) / float(fragmentListInfoBuffer.data.voxelResolution);

  // this step takes ~80% of the time for the entire chunk generation
  float noise = (floorHeightMean - yPosition) + floorChangeVar * computeNoise(noiseLookupPos);

  imageStore(chunkFieldImage, uvi, uvec4(packFloatToUint8(noise, -0.1, 0.1), 0, 0, 0));
}

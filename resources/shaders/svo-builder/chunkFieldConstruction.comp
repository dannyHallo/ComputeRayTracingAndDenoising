#version 450
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

#include "../include/svoBuilderDescriptorSetLayouts.glsl"

#include "../include/core/cnoise.glsl"
#include "../include/core/inoise.glsl"

#include "../include/blockTypeAndWeight.glsl"

vec4 computeNoise(vec3 p) {
  float total       = 0.0;
  float amplitude   = 0.5;
  float frequency   = 2.0;
  float persistence = 0.3;
  float lacunarity  = 2.2;
  int octaves       = 5;

  vec3 gradient = vec3(0.0);
  for (int i = 0; i < octaves; i++) {
    vec4 noise = noised(p * frequency);
    // vec4 noise = vec4(cnoise(p * frequency));
    total += amplitude * (noise.x + 0.5);
    gradient += amplitude * frequency * noise.yzw;
    amplitude *= persistence;
    frequency *= lacunarity;
  }

  return vec4(total, gradient);
}

float islandGradientFalloff(ivec3 chunkDimension, vec3 globalVoxelPos) {
  vec2 halfWorldDim2D = chunkDimension.xz / 2.0;
  vec2 center         = halfWorldDim2D;
  return 1.0 - smoothstep(0.0, min(halfWorldDim2D.x, halfWorldDim2D.y),
                          distance(center, globalVoxelPos.xz));
}

void main() {
  ivec3 uvi = ivec3(gl_GlobalInvocationID);
  if (any(greaterThanEqual(uvi, ivec3(fragmentListInfoBuffer.data.voxelResolution + 1)))) {
    return;
  }
  const vec3 localVoxelPos = (vec3(uvi) - 0.5) / float(fragmentListInfoBuffer.data.voxelResolution);
  const vec3 chunkPos      = vec3(chunksInfoBuffer.data.currentlyWritingChunk);
  const vec3 globalVoxelPos = chunkPos + localVoxelPos;

  // x: noise val, yzw: gradient
  // this step takes ~80% of the time for the entire chunk generation
  float noise   = computeNoise(globalVoxelPos).x;
  float falloff = islandGradientFalloff(ivec3(chunksInfoBuffer.data.chunksDim), globalVoxelPos);
  // noise -= (1.0 - islandGradientFalloff(ivec3(chunksInfoBuffer.data.chunksDim), globalVoxelPos));
  noise *= falloff;

  float weight = noise - globalVoxelPos.y;

  uint blockType = getBlockTypeFromWeight(weight);

  if (blockType != kBlockTypeEmpty) {
    if (globalVoxelPos.y < 0.1) {
      blockType = kBlockTypeSand;
    }
  }

  uint packed = packBlockTypeAndWeight(blockType, weight);

  imageStore(chunkFieldImage, uvi, uvec4(packed, 0, 0, 0));
}

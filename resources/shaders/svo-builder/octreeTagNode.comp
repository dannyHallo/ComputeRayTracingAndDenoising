#version 450
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

#include "../include/svoBuilderDescriptorSetLayouts.glsl"

uvec4 LeafToUvec4(uint val) {
  return uvec4((val & 0xFF), ((val >> 8) & 0xFF), ((val >> 16) & 0xFF),
               ((val >> 24) & 0x3F));
}
uint Uvec4ToLeaf(uvec4 vec) {
  return (min(vec.w, 0x3F) << 24) | (vec.x & 0xFF) | ((vec.y & 0xFF) << 8) |
         ((vec.z & 0xFF) << 16) | 0xC0000000;
}

// returns the index of the node to be tagged (it has just been initialized to
// 0)
uint TraverseOctree(in const uvec3 voxel_pos, out bool is_leaf) {
  uint level_dim  = fragmentListInfoBuffer.data.voxelResolution;
  uvec3 level_pos = voxel_pos;

  uint idx = 0u, cur = 0u;
  do {
    // fast division by 2, level_dim is always 2^n, n >= 0
    bvec3 cmp = greaterThanEqual(level_pos, uvec3(level_dim >>= 1));
    idx       = cur | uint(cmp.x) | (uint(cmp.y) << 1) | (uint(cmp.z) << 2);
    cur       = octreeBuffer.data[idx] & 0x3FFFFFFF; // read node pointer
    level_pos -= uvec3(cmp) * level_dim;
  } while (cur != 0 && level_dim > 1u);
  is_leaf = level_dim == 1u;
  return idx;
}

void main() {
  if (gl_GlobalInvocationID.x >= fragmentListInfoBuffer.data.voxelFragmentCount) return;
  G_FragmentListEntry ufragment = fragmentListBuffer.datas[gl_GlobalInvocationID.x];

  uint coordinates = ufragment.coordinates;
  uvec3 voxel_pos  = uvec3((coordinates & 0x000003FF), (coordinates & 0x000FFC00) >> 10,
                           (coordinates & 0x3FF00000) >> 20);

  bool is_leaf;
  // is_leaf is only true when the leaf node is allocated
  uint idx = TraverseOctree(voxel_pos, is_leaf);

  if (is_leaf) {
    uint properties        = ufragment.properties;
    octreeBuffer.data[idx] = 0xC0000000u | properties;

    // atomic moving average
    // uint prev_val = 0, cur_val, new_val = 0xC1000000u | (ufragment.y & 0xffffffu);
    // uvec4 rgba = LeafToUvec4(new_val);
    // while ((cur_val = atomicCompSwap(uOctree[idx], prev_val, new_val)) != prev_val) {
    //   prev_val        = cur_val;
    //   uvec4 prev_rgba = LeafToUvec4(prev_val);
    //   prev_rgba.xyz *= prev_rgba.w;
    //   uvec4 cur_rgba = prev_rgba + rgba;
    //   cur_rgba.xyz /= cur_rgba.w;
    //   new_val = Uvec4ToLeaf(cur_rgba);
    // }
  } else
    // flag the node so it can be subdivided (using msb)
    octreeBuffer.data[idx] = 0x80000000u;
}

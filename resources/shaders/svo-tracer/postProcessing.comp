#version 450
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "../include/svoTracerDescriptorSetLayouts.glsl"

#include "../include/core/color.glsl"
#include "../include/core/packer.glsl"
#include "../include/core/postProcessing.glsl"

#include "../include/projection.glsl"

// #define RAW
// #define BLITTED
// #define SHADOW_MAP

const uint kDotPixelInnerRadius = 4;
const uint kDotPixelOuterRadius = 5;
const vec4 kDotColor            = vec4(1, 1, 1, 0.4);

ivec2 highResToLowRes(ivec2 highResuvi) {
  const float ratio =
      float(renderInfoUbo.data.lowResSize.x) / float(renderInfoUbo.data.highResSize.x);
  return ivec2(vec2(highResuvi) * ratio);
}

vec3 blendWithDot(vec3 color, ivec2 uvi) {
  ivec2 center = ivec2(renderInfoUbo.data.highResSize) / 2;
  ivec2 diff   = abs(uvi - center);

  // fast bb culling
  if (diff.x > kDotPixelOuterRadius || diff.y > kDotPixelOuterRadius) {
    return color;
  }

  float diffSq = float(dot(diff, diff));

  // border dropoffFac
  float dist = sqrt(diffSq);
  float dotStrength =
      1 - smoothstep(float(kDotPixelInnerRadius), float(kDotPixelOuterRadius), dist);
  dotStrength *= kDotColor.a;
  return mix(color, kDotColor.rgb, dotStrength);
}

vec3 debugInfoOverwrite(ivec2 lowResUvi) {
  if (lowResUvi.x < 0 || lowResUvi.y < 0 || lowResUvi.x >= renderInfoUbo.data.lowResSize.x ||
      lowResUvi.y >= renderInfoUbo.data.lowResSize.y) {
    return vec3(0);
  }
  return imageLoad(octreeVisualizationImage, lowResUvi).rgb;
}

vec3 getColor(ivec2 uvi) {
#ifdef RAW
  if (all(lessThan(uvi, ivec2(imageSize(rawImage))))) {
    return unpackRgbe(imageLoad(rawImage, uvi).x);
  }
#endif // RAW

#ifdef BLITTED
  if (all(lessThan(uvi, ivec2(imageSize(blittedImage))))) {
    return unpackRgbe(imageLoad(blittedImage, uvi).x);
  }
#endif // BLITTED

#ifdef SHADOW_MAP
  if (all(lessThan(uvi, ivec2(imageSize(shadowMapImage))))) {
    float dist = imageLoad(shadowMapImage, uvi).x;
    return vec3(exp(-dist * 0.1));
  }
#endif // SHADOW_MAP

  vec3 hdrColor = imageLoad(taaImage, uvi).rgb;

  vec3 color = hdrColor;
  color      = jodieReinhardTmo(hdrColor, tweakableParametersUbo.data.explosure);

  // dithering pattern, to reduce banding
  color += getDitherMask(uvi);

  ivec2 lowResUv = highResToLowRes(uvi);
  color += debugInfoOverwrite(lowResUv);

  color = blendWithDot(color, uvi);
  
  return color;
}

void main() {
  ivec2 uvi = ivec2(gl_GlobalInvocationID.xy);
  if (any(greaterThanEqual(uvi, imageSize(renderTargetImage)))) {
    return;
  }

  imageStore(renderTargetImage, uvi, vec4(getColor(uvi).rgb, 1));
}

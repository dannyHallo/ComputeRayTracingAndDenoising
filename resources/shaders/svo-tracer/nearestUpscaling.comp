#version 450
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "../include/svoTracerDescriptorSetLayouts.glsl"

#include "../include/core/color.glsl"
#include "../include/core/packer.glsl"
#include "../include/core/postProcessing.glsl"

#include "../include/projection.glsl"

const uint kDotPixelInnerRadius = 4;
const uint kDotPixelOuterRadius = 5;
const vec4 kDotColor            = vec4(1, 1, 1, 0.4);

ivec2 highResToMidRes(ivec2 highResuvi) {
  float ratio = float(renderInfoUbo.data.midResSize.x) / float(renderInfoUbo.data.highResSize.x);
  return ivec2(vec2(highResuvi) * ratio);
}

vec2 midResToLowRes(ivec2 midResuvi) {
  vec2 subpixOffset =
      bool(twickableParametersUbo.data.taa) ? renderInfoUbo.data.subpixOffset : vec2(0);
  return (vec2(midResuvi) + vec2(0.5)) *
             (vec2(renderInfoUbo.data.lowResSize) / vec2(renderInfoUbo.data.midResSize)) -
         vec2(0.5) - subpixOffset;
}

vec3 blendWithDot(vec3 color, ivec2 uvi) {
  ivec2 center = ivec2(renderInfoUbo.data.highResSize) / 2;
  ivec2 diff   = abs(uvi - center);

  // fast bb culling
  if (diff.x > kDotPixelOuterRadius || diff.y > kDotPixelOuterRadius) {
    return color;
  }

  float diffSq = float(dot(diff, diff));

  // border dropoffFac
  float dist = sqrt(diffSq);
  float dotStrength =
      1 - smoothstep(float(kDotPixelInnerRadius), float(kDotPixelOuterRadius), dist);
  dotStrength *= kDotColor.a;
  return mix(color, kDotColor.rgb, dotStrength);
}

vec3 debugInfoOverwrite(ivec2 midResuvi) {
  ivec2 lowResuvi = ivec2(midResToLowRes(midResuvi));
  if (lowResuvi.x < 0 || lowResuvi.y < 0 || lowResuvi.x >= renderInfoUbo.data.lowResSize.x ||
      lowResuvi.y >= renderInfoUbo.data.lowResSize.y) {
    return vec3(0);
  }
  return unpackRGBE(imageLoad(octreeVisualizationImage, lowResuvi).x);
}

// #define RAW_DIRECT_OUTPUT

void main() {
  ivec2 uvi = ivec2(gl_GlobalInvocationID.xy);

#ifdef RAW_DIRECT_OUTPUT
  if (any(greaterThanEqual(uvi, ivec2(renderInfoUbo.data.lowResSize)))) {
    return;
  }
  vec3 readingCol = unpackRGBE(imageLoad(rawImage, uvi).x).rgb;
  imageStore(renderTargetImage, uvi, vec4(readingCol.zyx, 1));
  return;
#endif

  ivec2 targetSize = imageSize(renderTargetImage);
  if (any(greaterThanEqual(uvi, targetSize))) {
    return;
  }

  ivec2 midResUv = highResToMidRes(uvi);
  vec3 color     = imageLoad(taaImage, midResUv).rgb;

  // color = jodieReinhardTonemap(color);

  // dithering pattern, to reduce banding
  color += getDitherMask(uvi);

  color += debugInfoOverwrite(midResUv);

  color = blendWithDot(color, uvi);

  // rgb to bgr
  imageStore(renderTargetImage, uvi, vec4(color.bgr, 1));
}

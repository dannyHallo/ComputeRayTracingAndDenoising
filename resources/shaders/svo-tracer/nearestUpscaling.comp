#version 450
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "../include/svoTracerDescriptorSetLayouts.glsl"

#include "../include/packer.glsl"

const uint kDotPixelInnerRadius = 4;
const uint kDotPixelOuterRadius = 5;
const vec4 kDotColor            = vec4(1, 1, 1, 0.4);

ivec2 highResToMidRes(ivec2 highResUv) {
  float ratio = float(renderInfoUbo.data.midResSize.x) / float(renderInfoUbo.data.highResSize.x);
  return ivec2(vec2(highResUv) * ratio);
}

vec2 midResToLowRes(ivec2 midResUv) {
  vec2 subpixOffset =
      bool(twickableParametersUbo.data.taa) ? renderInfoUbo.data.subpixOffset : vec2(0);
  return (vec2(midResUv) + vec2(0.5)) *
             (vec2(renderInfoUbo.data.lowResSize) / vec2(renderInfoUbo.data.midResSize)) -
         vec2(0.5) - subpixOffset;
}

// https://www.shadertoy.com/view/MslGR8
vec3 getDitherMask(ivec2 screenSpaceUv) {
  // bit-depth of display. Normally 8 but some LCD monitors are 7 or even 6-bit.
  float dither_bit = 8.0;
  // calculate grid position
  float grid_position =
      fract(dot(screenSpaceUv - vec2(0.5, 0.5), vec2(1.0 / 16.0, 10.0 / 36.0) + 0.25));

  // calculate how big the shift should be
  float dither_shift = (0.25) * (1.0 / (pow(2.0, dither_bit) - 1.0));

  // shift the individual colors differently, thus making it even harder to see the dithering
  // pattern
  vec3 dither_shift_RGB = vec3(dither_shift, -dither_shift, dither_shift); // subpixel dithering

  // modify shift acording to grid position
  dither_shift_RGB = mix(2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position);

  // shift the color by dither_shift
  return 0.5 / 255.0 + dither_shift_RGB;
}

vec3 blendWithDot(vec3 color, ivec2 uv) {
  ivec2 center = ivec2(renderInfoUbo.data.highResSize) / 2;
  ivec2 diff   = abs(uv - center);

  // fast bb culling
  if (diff.x > kDotPixelOuterRadius || diff.y > kDotPixelOuterRadius) {
    return color;
  }

  float diffSq = float(dot(diff, diff));

  // border dropoff
  float dist = sqrt(diffSq);
  float dotStrength =
      1 - smoothstep(float(kDotPixelInnerRadius), float(kDotPixelOuterRadius), dist);
  dotStrength *= kDotColor.a;
  return mix(color, kDotColor.rgb, dotStrength);
}

vec3 debugInfoOverwrite(ivec2 midResUv) {
  ivec2 lowResUv = ivec2(midResToLowRes(midResUv));
  if (lowResUv.x < 0 || lowResUv.y < 0 || lowResUv.x >= renderInfoUbo.data.lowResSize.x ||
      lowResUv.y >= renderInfoUbo.data.lowResSize.y) {
    return vec3(0);
  }
  return unpackRGBE(imageLoad(octreeVisualizationImage, lowResUv).x);
}

// #define RAW_DIRECT_OUTPUT

void main() {
  ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
  if (any(greaterThanEqual(uv, ivec2(renderInfoUbo.data.highResSize)))) {
    return;
  }

#ifdef RAW_DIRECT_OUTPUT
  if (any(greaterThanEqual(uv, ivec2(renderInfoUbo.data.lowResSize)))) {
    return;
  }
  vec3 readingCol = unpackRGBE(imageLoad(rawImage, uv).x).rgb;
  imageStore(renderTargetImage, uv, vec4(readingCol.zyx, 1));
  return;
#endif

  ivec2 midResUv = highResToMidRes(uv);
  vec3 color     = imageLoad(taaImage, midResUv).rgb;

  // dithering pattern, to reduce banding
  color += getDitherMask(uv);

  color += debugInfoOverwrite(midResUv);

  color = blendWithDot(color, uv);

  // rgb to bgr
  imageStore(renderTargetImage, uv, vec4(color.bgr, 1));
}
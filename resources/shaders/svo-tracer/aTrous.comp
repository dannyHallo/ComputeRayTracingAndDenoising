#version 450
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "../include/svoTracerDescriptorSetLayouts.glsl"

#include "../include/core/color.glsl"
#include "../include/core/definitions.glsl"
#include "../include/core/packer.glsl"
#include "../include/random.glsl"

// standard 3x3 filtering kernel from q2rtx
const float waveletFac      = 0.5;
const float kernel3x3[2][2] = {{1.0, waveletFac}, {waveletFac, waveletFac *waveletFac}};

float luminanceAtUv;
float depthAtUv;

ivec2 jittering(int stepSize) {
  uvec3 seed       = uvec3(gl_GlobalInvocationID.xy, renderInfoUbo.data.currentSample);
  vec2 randomNoise = vec2(random(seed), random(seed));
  randomNoise -= 0.5;
  randomNoise *= 0.5;
  ivec2 jitter = ivec2(randomNoise * stepSize);
  return jitter;
}

void loadDataFromPing(out vec3 oNormal, out vec3 oColor, out vec3 oPosition, ivec2 uvi) {
  ivec2 bound = ivec2(renderInfoUbo.data.lowResSize);
  // padding
  if (any(lessThan(uvi, ivec2(0))) || any(greaterThanEqual(uvi, bound))) {
    uvi = clamp(uvi, ivec2(0), bound - ivec2(1));
  }

  oNormal   = unpackNormal(imageLoad(normalImage, uvi).x);
  oColor    = unpackRGBE(imageLoad(aTrousPingImage, uvi).x);
  oPosition = imageLoad(positionImage, uvi).xyz;
}

void loadDataFromPong(out vec3 oNormal, out vec3 oColor, out vec3 oPosition, ivec2 uvi) {
  ivec2 bound = ivec2(renderInfoUbo.data.lowResSize);
  if (any(lessThan(uvi, ivec2(0))) || any(greaterThanEqual(uvi, bound))) {
    uvi = clamp(uvi, ivec2(0), bound - ivec2(1));
  }

  oNormal   = unpackNormal(imageLoad(normalImage, uvi).x);
  oColor    = unpackRGBE(imageLoad(aTrousPongImage, uvi).x);
  oPosition = imageLoad(positionImage, uvi).xyz;
}

void blurKernel(inout float weightSum, inout vec3 sumOfWeightedColors, ivec2 uvi, ivec2 dispatchXY,
                int kernalHalfSize, uint currentIteration, vec3 normalAtUv, vec3 colorAtUv,
                vec3 positionAtUv, float luminanceAtUv, float depthAtUv) {
  int stepSize   = 1 << currentIteration;
  ivec2 offsetXY = dispatchXY * stepSize;

  // jittering is heavy and no longer applied here to avoid divergence withing the same warp

  float weightK = kernel3x3[abs(dispatchXY.x)][abs(dispatchXY.y)];

  if (dispatchXY == ivec2(0)) {
    float weight = weightK;
    weight       = clamp(weight, 0, 1);
    weightSum += weight;
    sumOfWeightedColors += weight * colorAtUv;
    return;
  }

  // since we give a offset here, we need to check if the hit is valid again
  if (imageLoad(hitImage, uvi + offsetXY).x == 0) {
    return;
  }

  vec3 normalAtSample;
  vec3 colorAtSample;
  vec3 positionAtSample;
  // float varianceAtSample;

  if (currentIteration % 2 == 0) {
    loadDataFromPing(normalAtSample, colorAtSample, positionAtSample, uvi + offsetXY);
  } else {
    loadDataFromPong(normalAtSample, colorAtSample, positionAtSample, uvi + offsetXY);
  }

  // WEIGHT_C
  float phiC = spatialFilterInfoUbo.data.phiC;
  if (bool(spatialFilterInfoUbo.data.changingLuminancePhi)) {
    phiC *= pow(2, -currentIteration);
  }

  float colDiff = abs(lum(colorAtSample) - luminanceAtUv);
  float weightC = exp(-colDiff / phiC);

  // WEIGHT_N
  float weightN = max(0., pow(dot(normalAtUv, normalAtSample), spatialFilterInfoUbo.data.phiN));

  // WEIGHT_P
  float weightP = exp(-distance(positionAtSample, positionAtUv) / spatialFilterInfoUbo.data.phiP);

  // WEIGHT_Z
  float weightZ        = 1.0;
  float depthFalloff   = exp(-depthAtUv);
  float depthThrehold  = spatialFilterInfoUbo.data.phiZ;
  float depthTolerence = spatialFilterInfoUbo.data.phiZTolerance;

  // depth is bigger than the threshold
  if (depthFalloff < depthThrehold) {
    weightZ = 1.0;
  } else {
    bool sameVoxHash = imageLoad(voxHashImage, uvi).x == imageLoad(voxHashImage, uvi + offsetXY).x;

    // use tolerance to avoid sudden change
    if (sameVoxHash) {
      weightZ = 1.0;
    } else {
      if (depthFalloff < depthThrehold + depthTolerence) {
        weightZ = 1 - (depthFalloff - depthThrehold) / depthTolerence;
      } else {
        weightZ = 0.0;
      }
    }
  }

  float weight = weightK * weightC * weightN * weightP * weightZ;

  weightSum += weight;
  sumOfWeightedColors += weight * colorAtSample;
}

void main() {
  ivec2 uvi = ivec2(gl_GlobalInvocationID.xy);
  if (any(greaterThanEqual(uvi, ivec2(renderInfoUbo.data.lowResSize)))) {
    return;
  }

  if (imageLoad(hitImage, uvi).x == 0) {
    return;
  }

  uint currentIteration = aTrousIterationBuffer.data;
  if (currentIteration >= spatialFilterInfoUbo.data.aTrousIterationCount) {
    // no A-Trous at all: just copy input to the output at the first iteration
    if (currentIteration == 0) {
      uint packedColor = imageLoad(aTrousPingImage, uvi).x;
      imageStore(aTrousFinalResultImage, uvi, uvec4(packedColor, 0, 0, 0));
      imageStore(accumedImage, uvi, uvec4(packedColor, 0, 0, 0));
    }
    return;
  }

  vec3 normalAtUv, colorAtUv, positionAtUv;
  if (currentIteration % 2 == 0) {
    loadDataFromPing(normalAtUv, colorAtUv, positionAtUv, uvi);
  } else {
    loadDataFromPong(normalAtUv, colorAtUv, positionAtUv, uvi);
  }

  luminanceAtUv = lum(colorAtUv);
  depthAtUv     = imageLoad(depthImage, uvi).x;

  const int kernalHalfSize = 1;
  float weightSum          = 0;
  vec3 sumOfWeightedColors = vec3(0);
  for (int indexX = -kernalHalfSize; indexX <= kernalHalfSize; indexX++) {
    for (int indexY = -kernalHalfSize; indexY <= kernalHalfSize; indexY++) {
      blurKernel(weightSum, sumOfWeightedColors, uvi, ivec2(indexX, indexY), kernalHalfSize,
                 currentIteration, normalAtUv, colorAtUv, positionAtUv, luminanceAtUv, depthAtUv);
    }
  }
  vec3 weightedColor = sumOfWeightedColors / weightSum;

  uint packedWeightedColor = packRGBE(weightedColor);
  // send to accum buffer for the first iteration
  if (currentIteration == 0) {
    imageStore(accumedImage, uvi, uvec4(packedWeightedColor, 0, 0, 0));
  }

  // dump image if this is the last iteration
  if (currentIteration == spatialFilterInfoUbo.data.aTrousIterationCount - 1) {
    imageStore(aTrousFinalResultImage, uvi, uvec4(packedWeightedColor, 0, 0, 0));
    return;
  }

  // send to pingpong buffer
  if (currentIteration % 2 == 0) {
    imageStore(aTrousPongImage, uvi, uvec4(packedWeightedColor, 0, 0, 0));
  } else {
    imageStore(aTrousPingImage, uvi, uvec4(packedWeightedColor, 0, 0, 0));
  }
}
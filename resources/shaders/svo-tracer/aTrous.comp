#version 450
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "../include/svoTracerDescriptorSetLayouts.glsl"

#include "../include/core/color.glsl"
#include "../include/core/definitions.glsl"
#include "../include/core/packer.glsl"
#include "../include/random.glsl"

// standard 3x3 filtering kernel from q2rtx
const float waveletFac      = 0.5;
const float kernel3x3[2][2] = {{1.0, waveletFac}, {waveletFac, waveletFac *waveletFac}};

void loadDataFromPingPong(out vec3 oNormal, out vec3 oColor, out vec3 oPosition, ivec2 uvi,
                          uint currentIteration) {
  oNormal   = unpackNormal(imageLoad(normalImage, uvi).x);
  oColor    = (currentIteration % 2 == 0) ? imageLoad(aTrousPongImage, uvi).rgb
                                          : imageLoad(aTrousPingImage, uvi).rgb;
  oPosition = imageLoad(positionImage, uvi).xyz;
}

void saveColorToPingPong(ivec2 uvi, vec3 color, uint currentIteration) {
  if (currentIteration % 2 == 0) {
    imageStore(aTrousPingImage, uvi, vec4(color, 0));
  } else {
    imageStore(aTrousPongImage, uvi, vec4(color, 0));
  }
}

void blurKernel(inout float weightSum, inout vec3 sumOfWeightedColors, ivec2 uvi, ivec2 dispatchXY,
                int kernalHalfSize, uint currentIteration, vec3 normalAtUv, vec3 colorAtUv,
                vec3 positionAtUv, float luminanceAtUv, float depthAtUv) {
  int stepSize    = 1 << currentIteration;
  ivec2 offsetXY  = dispatchXY * stepSize;
  ivec2 sampleUvi = uvi + offsetXY;

  // jittering is computationally heavy and is no longer applied here to avoid divergence within
  // the same warp

  float weightK = kernel3x3[abs(dispatchXY.x)][abs(dispatchXY.y)];

  if (dispatchXY == ivec2(0)) {
    float weight = weightK;
    weight       = clamp(weight, 0, 1);
    weightSum += weight;
    sumOfWeightedColors += weight * colorAtUv;
    return;
  }

  // since we give a offset here, we need to check if the hit is valid again
  if (imageLoad(hitImage, sampleUvi).x == 0) {
    return;
  }

  // check if the sample point is out of bound
  if (any(lessThan(sampleUvi, ivec2(0))) ||
      any(greaterThanEqual(sampleUvi, ivec2(renderInfoUbo.data.lowResSize)))) {
    return;
  }

  vec3 normalAtSample, colorAtSample, positionAtSample;
  loadDataFromPingPong(normalAtSample, colorAtSample, positionAtSample, sampleUvi,
                       currentIteration);

  // WEIGHT_C
  float phiC = spatialFilterInfoUbo.data.phiC * 10.0;
  if (bool(spatialFilterInfoUbo.data.changingLuminancePhi)) {
    phiC *= pow(2, -currentIteration);
  }

  float colDiff = abs(lum(colorAtSample) - luminanceAtUv);
  float weightC = exp(-colDiff / phiC);

  // WEIGHT_N
  float weightN = max(0., pow(dot(normalAtUv, normalAtSample), spatialFilterInfoUbo.data.phiN));

  // WEIGHT_P
  float weightP = exp(-distance(positionAtSample, positionAtUv) / spatialFilterInfoUbo.data.phiP);

  // WEIGHT_Z: default is to blur across different voxels
  float weightZ            = 1.0;
  const float depthFalloff = exp(-depthAtUv);
  const float minPhiZ      = spatialFilterInfoUbo.data.minPhiZ;
  const float maxPhiZ      = max(minPhiZ, spatialFilterInfoUbo.data.maxPhiZ);

  // if depth is short, we should avoid blur across different voxel
  // however, if the hist sample is low, we should still blur across them to get rid of noise
  if (depthFalloff > minPhiZ) {
    bool sameVoxHash = imageLoad(voxHashImage, uvi).x == imageLoad(voxHashImage, sampleUvi).x;

    // only if the voxels are different, we might blur across them
    if (!sameVoxHash) {
      const float hist = float(imageLoad(temporalHistLengthImage, uvi).x);

      float distWeight = smoothstep(minPhiZ, maxPhiZ, depthFalloff);

      // combine with hist weight, if the hist is low, we should still blur across different voxels
      distWeight *= smoothstep(0.0, spatialFilterInfoUbo.data.phiZStableSampleCount * 256.0, hist);

      weightZ = 1.0 - distWeight;
    }
  }

  float weight = weightK * weightC * weightN * weightP * weightZ;

  weightSum += weight;
  sumOfWeightedColors += weight * colorAtSample;
}

void main() {
  ivec2 uvi = ivec2(gl_GlobalInvocationID.xy);
  if (any(greaterThanEqual(uvi, ivec2(renderInfoUbo.data.lowResSize)))) {
    return;
  }

  if (imageLoad(hitImage, uvi).x == 0) {
    return;
  }

  // this counts from 0
  uint currentIteration = aTrousIterationBuffer.data;
  if (currentIteration >= spatialFilterInfoUbo.data.aTrousIterationCount) {
    return;
  }

  vec3 normalAtUv, colorAtUv, positionAtUv;
  loadDataFromPingPong(normalAtUv, colorAtUv, positionAtUv, uvi, currentIteration);

  float luminanceAtUv = lum(colorAtUv);
  float depthAtUv     = imageLoad(depthImage, uvi).x;

  const int kernalHalfSize = 1;
  float weightSum          = 0;
  vec3 sumOfWeightedColors = vec3(0);
  for (int indexX = -kernalHalfSize; indexX <= kernalHalfSize; indexX++) {
    for (int indexY = -kernalHalfSize; indexY <= kernalHalfSize; indexY++) {
      blurKernel(weightSum, sumOfWeightedColors, uvi, ivec2(indexX, indexY), kernalHalfSize,
                 currentIteration, normalAtUv, colorAtUv, positionAtUv, luminanceAtUv, depthAtUv);
    }
  }
  vec3 weightedColor = sumOfWeightedColors / weightSum;

  // dump image if this is the last iteration
  if (currentIteration == spatialFilterInfoUbo.data.aTrousIterationCount - 1) {
    imageStore(aTrousPongImage, uvi, vec4(weightedColor, 0));
    return;
  }

  saveColorToPingPong(uvi, weightedColor, currentIteration);
}

#version 450
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "../include/svoTracerDescriptorSetLayouts.glsl"

#include "../include/cascadedMarching.glsl"
#include "../include/core/definitions.glsl"
#include "../include/core/packer.glsl"
#include "../include/projection.glsl"
#include "../include/random.glsl"
#include "../include/seascape.glsl"
#include "../include/skyColor.glsl"

// subpixOffset ranges from -0.5 to 0.5
void rayGen(out vec3 o, out vec3 d, vec2 subpixOffset) {
  vec2 screenSpaceUv = (vec2(gl_GlobalInvocationID.xy) + vec2(0.5) + subpixOffset) /
                       vec2(renderInfoUbo.data.lowResSize);
  o = renderInfoUbo.data.camPosition;
  d = normalize(projectScreenUvToWorldCamFarPoint(screenSpaceUv, false) -
                renderInfoUbo.data.camPosition);
}

uvec3 getSeed() {
  return uvec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, renderInfoUbo.data.currentSample);
}

vec3 getShadowRayColor(vec3 o, vec3 d) {
  MarchingResult shadowRayResult;
  bool shadowRayHit = cascadedMarching(shadowRayResult, o, d);
  if (shadowRayHit) {
    return vec3(0.0);
  }
  return skyColor(d, true);
}

vec3 getIndirectRayColor(vec3 o, vec3 d, uvec3 seed, vec3 shadowRayDirReuse) {
  MarchingResult indirectRayResult;

  bool indirectRayHit = cascadedMarching(indirectRayResult, o, d);
  if (!indirectRayHit) {
    // exclude the sun light here!
    return skyColor(d, false);
  }

  // reuse the shadow ray dir for better performance
  vec3 shadowRay2Color = vec3(0.0);
  if (dot(shadowRayDirReuse, indirectRayResult.normal) >= 0.0) {
    shadowRay2Color = getShadowRayColor(indirectRayResult.nextTracingPosition, shadowRayDirReuse);
    vec3 brdf       = indirectRayResult.color * kInvPi;
    const float shadowRayPdf = 1.0 / (0.0001 * kPi);
    shadowRay2Color *= brdf * dot(shadowRayDirReuse, indirectRayResult.normal) / shadowRayPdf;
  }

  return shadowRay2Color;
}

// surface color without brdf
vec3 computeRawSurfaceCol(vec3 surfacePoint, vec3 normal, uvec3 seed) {
  vec3 shadowRayDir   = getRandomShadowRay(makeDisturbedSeed(seed, 1));
  vec3 shadowRayColor = vec3(0.0);
  if (dot(shadowRayDir, normal) >= 0.0) {
    shadowRayColor           = getShadowRayColor(surfacePoint, shadowRayDir);
    const float shadowRayPdf = 1.0 / (0.0001 * kPi);
    shadowRayColor *= dot(shadowRayDir, normal) / shadowRayPdf;
  }

  if (tweakableParametersUbo.data.traceIndirectRay == 0u) {
    return shadowRayColor;
  }

  vec3 indirectRayDir   = randomCosineWeightedHemispherePoint(normal, makeDisturbedSeed(seed, 2));
  vec3 indirectRayColor = getIndirectRayColor(surfacePoint, indirectRayDir, seed, shadowRayDir);

  float indirectRayPdf = dot(indirectRayDir, normal) / kPi;
  indirectRayColor *= dot(indirectRayDir, normal) / indirectRayPdf;

  return shadowRayColor + indirectRayColor;
}

vec3 getSeaReflectedColor(uvec3 seed, vec3 reflectingPos, vec3 reflectedDir) {
  // return skyColor(reflectedDir, true);

  MarchingResult mr;
  bool hit = cascadedMarching(mr, reflectingPos, reflectedDir);

  if (!hit) {
    return skyColor(reflectedDir, true);
  }

  vec3 brdf = mr.color * kInvPi;
  return brdf * computeRawSurfaceCol(mr.nextTracingPosition, mr.normal, seed);
}

vec3 getSeaRefrectedColor(uvec3 seed, vec3 o, vec3 d) {
  MarchingResult underWaterRayResult;
  bool underWaterRayHit = cascadedMarching(underWaterRayResult, o, d);

  if (!underWaterRayHit) {
    return vec3(0.0);
  }

  float underWaterOpticalDepth  = underWaterRayResult.t;
  const float kTransmittanceFac = 6.0;
  const vec3 kSeaColor          = vec3(1.0);
  vec3 underWaveTransmittance   = kSeaColor * exp(-underWaterOpticalDepth * kTransmittanceFac);

  vec3 brdf                = underWaterRayResult.color * kInvPi;
  vec3 nextTracingPosition = underWaterRayResult.nextTracingPosition;
  if (underWaterRayResult.t < 0.005) {
    nextTracingPosition = o + underWaterRayResult.t * stbnScalar(seed) * d;
    brdf                = vec3(1.0);
  }

  vec3 color = brdf * computeRawSurfaceCol(nextTracingPosition, underWaterRayResult.normal, seed);
  return color * underWaveTransmittance;
}

bool getPrimaryRayColor(out float oT, out uint oPrimaryRayIterUsed,
                        out uint oPrimaryRayChunkTraversed, out vec3 oDiffuseColor,
                        out vec3 oSpecularColor, out vec3 oPosition, out vec3 oNormal,
                        out uint oVoxHash, uvec3 seed, vec3 o, vec3 d, float optimizedDistance,
                        vec3 seaHitPos, vec3 seaNormal, float seaT, bool hitSea) {
  MarchingResult primaryRayResult;
  bool primaryRayHit = cascadedMarching(primaryRayResult, o + d * optimizedDistance, d);

  oT                        = primaryRayResult.t + optimizedDistance;
  oPrimaryRayIterUsed       = primaryRayResult.iter;
  oPrimaryRayChunkTraversed = primaryRayResult.chunkTraversed;
  oDiffuseColor             = primaryRayResult.color;
  oSpecularColor            = vec3(0.0);
  oPosition                 = primaryRayResult.position;
  oNormal                   = primaryRayResult.normal;
  oVoxHash                  = primaryRayResult.voxHash;

  // hits nothing
  if (!primaryRayHit && !hitSea) {
    oDiffuseColor = skyColor(d, true);
    return false;
  }

  // hits sea
  if (hitSea && seaT < oT) {
    oT        = seaT;
    oPosition = seaHitPos;
    oNormal   = seaNormal;
    oVoxHash  = 0u;

    vec3 refrectedDir = refract(d, seaNormal, 1.0 / 1.33);
    vec3 reflectedDir = reflect(d, seaNormal);
    // prevent the reflected ray from going into the water
    reflectedDir.y = abs(reflectedDir.y);

    float fresnel = 0.04 + (1.0 - 0.04) * pow(1.0 - max(0.0, dot(-seaNormal, d)), 5.0);

    vec3 reflectedColor = getSeaReflectedColor(seed, seaHitPos, reflectedDir);
    vec3 refrectedColor = getSeaRefrectedColor(seed, seaHitPos, refrectedDir);

    oDiffuseColor  = (1 - fresnel) * refrectedColor;
    oSpecularColor = fresnel * reflectedColor;

    return true;
  }

  vec3 brdf     = primaryRayResult.color * kInvPi;
  oDiffuseColor = brdf * computeRawSurfaceCol(primaryRayResult.nextTracingPosition,
                                              primaryRayResult.normal, seed);
  return true;
}

void writeOutputBuffer(ivec2 uvi, bool hitVoxel, vec3 position) {
  // if uvi is not the center pixel, we don't write the output buffer
  if (uvi != ivec2(renderInfoUbo.data.lowResSize) / 2) {
    return;
  }
  outputInfoBuffer.data.midRayHit    = uint(hitVoxel);
  outputInfoBuffer.data.midRayHitPos = position;
}

void main() {
  ivec2 uvi = ivec2(gl_GlobalInvocationID.xy);
  if (any(greaterThanEqual(uvi, ivec2(renderInfoUbo.data.lowResSize)))) {
    return;
  }

  uvec3 seed = getSeed();

  vec3 o, d;
  // (-0.5, 0.5)
  vec2 subpixOffset =
      bool(tweakableParametersUbo.data.taa) ? renderInfoUbo.data.subpixOffset : vec2(0);
  rayGen(o, d, subpixOffset);

  vec3 seaHitPos, seaNormal;
  float seaT;
  bool hitSea = traceSeascape(seaHitPos, seaNormal, seaT, o, d);

  float optimizedDistance = 0;

  // beam optimization
  if (bool(tweakableParametersUbo.data.beamOptimization)) {
    ivec2 beamUv      = ivec2(gl_GlobalInvocationID.xy / sceneInfoBuffer.data.beamResolution);
    float t1          = imageLoad(beamDepthImage, beamUv).r;
    float t2          = imageLoad(beamDepthImage, beamUv + ivec2(1, 0)).r;
    float t3          = imageLoad(beamDepthImage, beamUv + ivec2(0, 1)).r;
    float t4          = imageLoad(beamDepthImage, beamUv + ivec2(1, 1)).r;
    float t           = min(min(t1, t2), min(t3, t4));
    optimizedDistance = t;
  }

  uint voxHash;
  uint primaryRayIterUsed;
  uint primaryRayChunkTraversed;
  vec3 normal, position, diffuseColor, specularColor;
  float tMin;
  bool hitVoxel = getPrimaryRayColor(tMin, primaryRayIterUsed, primaryRayChunkTraversed,
                                     diffuseColor, specularColor, position, normal, voxHash, seed,
                                     o, d, optimizedDistance, seaHitPos, seaNormal, seaT, hitSea);

  if (hitVoxel) {
    imageStore(positionImage, uvi, vec4(position, 0.0));
    imageStore(normalImage, uvi, uvec4(packNormal(normal), 0, 0, 0));
    imageStore(voxHashImage, uvi, uvec4(voxHash, 0, 0, 0));
  }
  imageStore(depthImage, uvi, vec4(tMin, 0.0, 0.0, 0.0));
  imageStore(instantImage, uvi, vec4(specularColor, 0.0));

  // calculate the motion here avoids a store - load cycle for the position, and the motion
  // vector can be reused in temporal filter and the taa filter, also, using a motion vector is
  // easier for us to handle moving objects in the future
  vec2 pUv01 = projectWorldPosToScreenUv(position, true);
  vec2 uv01  = projectWorldPosToScreenUv(position, false);
  // the motion vector points to the previous frame, and is normalized
  vec2 motion = pUv01 - uv01;

  imageStore(hitImage, uvi, uvec4(hitVoxel ? 1 : 0, 0, 0, 0));
  imageStore(motionImage, uvi, vec4(motion, 0, 0));

  uint packedDiffuseColor = packRgbe(diffuseColor);
  if (hitVoxel) {
    imageStore(rawImage, uvi, uvec4(packedDiffuseColor, 0, 0, 0));
  } else {
    imageStore(backgroundImage, uvi, uvec4(packedDiffuseColor, 0, 0, 0));
  }

  const vec3 iterUsedColor       = vec3(1, 0.4, 0.2) * 0.02 * float(primaryRayIterUsed);
  const vec3 chunkTraversedColor = vec3(0.2, 0.4, 1) * 0.2 * float(primaryRayChunkTraversed);

  vec3 overlappingColor = vec3(0);
  if (bool(tweakableParametersUbo.data.visualizeOctree)) {
    overlappingColor += iterUsedColor;
  }
  if (bool(tweakableParametersUbo.data.visualizeChunks)) {
    overlappingColor += chunkTraversedColor;
  }

  imageStore(octreeVisualizationImage, uvi, vec4(overlappingColor, 0));

  writeOutputBuffer(uvi, hitVoxel, position);
}

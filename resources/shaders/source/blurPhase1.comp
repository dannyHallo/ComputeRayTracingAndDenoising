#version 450

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// bigger phi indicates bigger tolerence to apply blur
layout(binding = 0) uniform UniformBufferObject {
  bool bypassBluring;
  float sigma;
  float cPhi;
  float nPhi;
  float pPhi;
  int i; // phase 1-5
}
ubo;

layout(binding = 1, rgba8) uniform image2D aTrousTex1;
layout(binding = 2, rgba8) uniform image2D normalTex;
layout(binding = 3, r32f) uniform image2D depthTex;
layout(binding = 4, rgba32f) uniform image2D posTex;
layout(binding = 5, rgba8) uniform image2D blurHTex;

// 56, 180 fps
// 44, 100 fps without separation

#include "include/blurCommon.glsl"

ivec2 uv;
vec2 gradientAtUV;
vec3 positionAtUV, normalAtUV;
vec4 colorAtUV;
float luminanceAtUV, depthAtUV;

void blurKernel(int indexX, inout float sumOfWeights,
                inout vec4 sumOfWeightedValues) {
  int x = int((indexX - kernalHalfSize) * pow(2, ubo.i));
  int y = 0;

  float weightDistFalloff = weightsATrous[indexX];

  float luminanceAtSample =
      rgbToLuminance(imageLoad(aTrousTex1, uv + ivec2(x, y)));
  float differenceInColorVec = abs(luminanceAtSample - luminanceAtUV);
  float weightC = exp(-differenceInColorVec * 3.5);

  // introduce the cosine term to describe normal edge stopping function
  vec3 normalAtSample = imageLoad(normalTex, uv + ivec2(x, y)).xyz;
  float weightN = max(0., pow(dot(normalAtSample, normalAtUV), 128.));

  // ---- method SVGF
  float depthAtSample = imageLoad(depthTex, uv + ivec2(x, y)).x;
  float weightZ = exp(-(abs(depthAtUV - depthAtSample) /
                        (1 * abs(dot(gradientAtUV, vec2(x, y))) + epsilon)));
  // ---- end of SVGF

  // ---- method A-Trous (cannot keep shadow area)
  // vec3 positionAtSample = imageLoad(posTex, uv + ivec2(x, y)).xyz;
  // vec3 differenceInPositionVec = positionAtUV - positionAtSample;
  // float differenceInPositionFloat2 =
  //     dot(differenceInPositionVec, differenceInPositionVec);
  // float weightZ = exp(-differenceInPositionFloat2 * 80);
  // ---- end of method A-Trous

  float weight = weightDistFalloff * weightN * weightZ * weightC;

  sumOfWeightedValues += weight * imageLoad(aTrousTex1, uv + ivec2(x, y));
  sumOfWeights += weight;
}

void main() {
  uv = ivec2(gl_GlobalInvocationID.xy);
  // vec2 imageSize = vec2(imageSize(blurHTex));

  colorAtUV = imageLoad(aTrousTex1, uv);
  luminanceAtUV = rgbToLuminance(colorAtUV);
  positionAtUV = imageLoad(posTex, uv).xyz;
  normalAtUV = imageLoad(normalTex, uv).xyz;
  depthAtUV = imageLoad(depthTex, uv).x;

  float dep4 = imageLoad(depthTex, uv + ivec2(0, 0)).x;
  float dep5 = imageLoad(depthTex, uv + ivec2(1, 0)).x;
  float dep7 = imageLoad(depthTex, uv + ivec2(0, 1)).x;
  gradientAtUV.x = dep5 - dep4;
  gradientAtUV.y = dep7 - dep4;

  if (ubo.bypassBluring) {
    imageStore(blurHTex, uv, colorAtUV);
    float depExp = exp(-dep4);
    imageStore(blurHTex, uv, vec4(gradientAtUV, 0, 1));
    return;
  }

  float sumOfWeights = 0;
  vec4 sumOfWeightedValues = vec4(0);
  vec4 weightedColor = vec4(0);

  for (int indexX = 0; indexX < kernelSize; indexX++) {
    blurKernel(indexX, sumOfWeights, sumOfWeightedValues);
  }

  weightedColor = sumOfWeightedValues / sumOfWeights;
  imageStore(blurHTex, uv, weightedColor);
}
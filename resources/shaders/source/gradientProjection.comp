#version 450

// this compute shader is dispatched before this frame's path tracing
#define GROUP_SIZE_STRATUM 8
#define STRATUM_SIZE 3
#define DISPATCH_SIZE (GROUP_SIZE_STRATUM * STRATUM_SIZE)

layout(local_size_x = GROUP_SIZE_STRATUM, local_size_y = GROUP_SIZE_STRATUM,
       local_size_z = 1) in;

#include "include/definitions.glsl"
#include "include/globalUbo.glsl"

layout(binding = 1) uniform UniformBufferObject {
  bool bypassGradientProjection;
  // we use the last position buffer and this mvpe for forward prejection
  // this sticks to the original paper
  mat4 thisMvpe;
}
ubo;

layout(binding = 2, rgba32f) readonly uniform image2D lastPosTex;
layout(binding = 3, rgba32f) uniform image2D lastRawColorTex;

shared vec3 reprojectedPixels[STRATUM_SIZE][STRATUM_SIZE];

ivec2 forwardProjection() {
  ivec2 uv            = ivec2(gl_GlobalInvocationID.xy);
  vec4 worldPos       = imageLoad(lastPosTex, uv);
  vec4 screenBoxCoord = ubo.thisMvpe * worldPos;
  // points are bounded in [-1, 1] in x, y, z after the following
  screenBoxCoord /= screenBoxCoord.w;
  // points are bounded in [0, 1] in x, y, meanwhile z, w are thrown away
  screenBoxCoord = (screenBoxCoord + vec4(1)) / 2;
  // to vulkan uv coord, starts from top left corner, range is [0, 1]
  vec2 uvCoord = vec2(screenBoxCoord.x, 1 - screenBoxCoord.y);
  ivec2 pp     = ivec2(uvCoord.x * globalUbo.swapchainWidth,
                       uvCoord.y * globalUbo.swapchainHeight);
}

void main() { uv = gl_GlobalInvocationID.xy; }
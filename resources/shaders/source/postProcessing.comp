#version 450

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0) uniform GlobalUniformBufferObject {
  uint swapchainWidth;
  uint swapchainHeight;
  uint currentSample;
  float time;
}
globalUbo;

layout(binding = 1, rgba8) uniform image2D aTrousTex2;
layout(binding = 2, rgba8) uniform image2D targetTex;

// Converts a color from linear light gamma to sRGB gamma
// https://gamedev.stackexchange.com/questions/92015/optimized-linear-to-srgb-glsl
vec4 linearToSrgb(vec4 linearRGB) {
  bvec4 cutoff = lessThan(linearRGB, vec4(0.0031308));
  vec4 higher  = vec4(1.055) * pow(linearRGB, vec4(1.0 / 2.4)) - vec4(0.055);
  vec4 lower   = linearRGB * vec4(12.92);

  return mix(higher, lower, cutoff);
}

void main() {
  ivec2 uv       = ivec2(gl_GlobalInvocationID.xy);
  vec4 colorAtUV = imageLoad(aTrousTex2, uv);

  colorAtUV = linearToSrgb(colorAtUV);
  imageStore(targetTex, uv, vec4(colorAtUV.zyx, 1));
}
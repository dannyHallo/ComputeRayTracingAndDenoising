#version 450

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

const float epsilon = 1e-8;

// standard 3x3 filtering kernel from q2rtx
const float waveletFac      = 0.5;
const float kernel3x3[2][2] = {{1.0, waveletFac},
                               {waveletFac, waveletFac *waveletFac}};

const vec3 rgbToLuminanceMat = vec3(0.2989, 0.5870, 0.1140);

#include "include/globalUbo.glsl"

// bigger phi indicates bigger tolerence to apply blur
layout(binding = 1) uniform UniformBufferObject {
  bool bypassBluring;
  int i;
  int iCap; // ranged from 0 - 5
  bool showVariance;
  bool useVarianceGuidedFiltering;
  bool useGradientInDepth;
  float phiLuminance;
  float phiDepth;
  float phiNormal;
  bool ignoreLuminanceAtFirstIteration;
  bool changingLuminancePhi;
  bool useJittering;
}
ubo;

layout(binding = 2, rgba8) readonly uniform image2D aTrousInputTex;
layout(binding = 3, rgba8) readonly uniform image2D normalTex;
layout(binding = 4, r32f) readonly uniform image2D depthTex;
layout(binding = 5, rg32f) readonly uniform image2D gradientTex;
layout(binding = 6, r32f) readonly uniform image2D varianceTex;
layout(binding = 7, rgba8) writeonly uniform image2D accumTex;
layout(binding = 8, rgba8) writeonly uniform image2D aTrousOutputTex;

#include "include/plasticRandom.glsl"

ivec2 uv;

vec2 gradientAtUV;
vec3 normalAtUV;
vec3 colorAtUV;
float depthAtUV;
float varianceAtUV;
float luminanceAtUV;

ivec2 jittering(int stepSize) {
  vec2 ldsNoise = ldsNoise2d(globalUbo.currentSample * 19937 + ubo.i + uv.x,
                             globalUbo.currentSample * 19937 + ubo.i + uv.y);
  ldsNoise -= 0.5;
  ldsNoise *= 0.5;
  ivec2 jitter = ivec2(ldsNoise * stepSize);
  return jitter;
}

void getSharedData(ivec2 offsetXY, out vec2 gradientAtUV, out vec3 normalAtUV,
                   out vec3 colorAtUV, out float depthAtUV,
                   out float varianceAtUV) {
  ivec2 ipos = uv + offsetXY;
  if (ipos.x < 0 || ipos.y < 0 || ipos.x >= globalUbo.swapchainWidth ||
      ipos.y >= globalUbo.swapchainHeight) {
    ipos = clamp(
        ipos, ivec2(0),
        ivec2(globalUbo.swapchainWidth - 1, globalUbo.swapchainHeight - 1));
  }

  gradientAtUV = imageLoad(gradientTex, ipos).xy;
  normalAtUV   = imageLoad(normalTex, ipos).xyz;
  colorAtUV    = imageLoad(aTrousInputTex, ipos).xyz;
  depthAtUV    = imageLoad(depthTex, ipos).x;
  varianceAtUV = imageLoad(varianceTex, ipos).x;
}

void blurKernel(ivec2 dispatchXY, int kernalHalfSize, inout float weightSum,
                inout vec4 sumOfWeightedValues) {
  int stepSize   = 1 << ubo.i;
  ivec2 offsetXY = dispatchXY * stepSize;
  if (ubo.useJittering && dispatchXY != ivec2(0)) {
    offsetXY += jittering(stepSize);
  }

  float weightK = kernel3x3[abs(dispatchXY.x)][abs(dispatchXY.y)];
  if (dispatchXY == ivec2(0)) {
    float weight = weightK;
    weight       = clamp(weight, 0, 1);
    weightSum += weight;
    sumOfWeightedValues += weight * vec4(colorAtUV, 1);
  } else {
    float weightC, weightN, weightZ;

    vec2 gradientAtSample;
    vec3 normalAtSample;
    vec3 colorAtSample;
    float depthAtSample;
    float varianceAtSample;
    getSharedData(offsetXY, gradientAtSample, normalAtSample, colorAtSample,
                  depthAtSample, varianceAtSample);

    float luminanceAtSample = dot(colorAtSample, rgbToLuminanceMat);
    float phiC              = ubo.phiLuminance;
    if (ubo.changingLuminancePhi) {
      phiC = pow(2, -ubo.i) * ubo.phiLuminance;
    }
    weightC       = 0;
    float colDiff = abs(luminanceAtSample - luminanceAtUV);
    if (ubo.useVarianceGuidedFiltering) {
      phiC *= 100.;
      weightC = exp(-colDiff / max(phiC * sqrt(varianceAtUV), epsilon));
    } else {
      weightC = exp(-colDiff / phiC);
    }
    if (ubo.ignoreLuminanceAtFirstIteration && ubo.i == 0) {
      weightC = 1.0;
    }

    weightN = max(0., pow(dot(normalAtUV, normalAtSample), ubo.phiNormal));

    float differenceInDepth = 0;
    // using gradient here can better blend samples within a single screen space
    // tilted mesh
    if (ubo.useGradientInDepth) {
      differenceInDepth =
          abs((depthAtUV - depthAtSample) - dot(gradientAtUV, vec2(offsetXY)));
    } else {
      differenceInDepth = abs(depthAtUV - depthAtSample);
    }
    weightZ = exp(-differenceInDepth / ubo.phiDepth);

    float weight = weightK * weightC * weightN * weightZ;
    weightSum += weight;
    sumOfWeightedValues += weight * vec4(colorAtSample, 1);
  }
}

void main() {
  uv = ivec2(gl_GlobalInvocationID.xy);
  if (uv.x >= globalUbo.swapchainWidth || uv.y >= globalUbo.swapchainHeight) {
    return;
  }

  getSharedData(ivec2(0), gradientAtUV, normalAtUV, colorAtUV, depthAtUV,
                varianceAtUV);

  luminanceAtUV = dot(colorAtUV, rgbToLuminanceMat);

  if (ubo.bypassBluring || ubo.i >= ubo.iCap) {
    if (ubo.i == 0) {
      imageStore(accumTex, uv, vec4(colorAtUV, 1));
    }
    imageStore(aTrousOutputTex, uv, vec4(colorAtUV, 1));
    return;
  }

  const int kernelSize     = 3;
  const int kernalHalfSize = 1;

  float weightSum          = 0;
  vec4 sumOfWeightedValues = vec4(0);
  for (int indexX = -kernalHalfSize; indexX <= kernalHalfSize; indexX++) {
    for (int indexY = -kernalHalfSize; indexY <= kernalHalfSize; indexY++) {
      blurKernel(ivec2(indexX, indexY), kernalHalfSize, weightSum,
                 sumOfWeightedValues);
    }
  }

  vec4 weightedColor = sumOfWeightedValues / weightSum;

  float varianceAtUV = min(varianceAtUV * 10, 1);

  if (ubo.i == 0) {
    imageStore(accumTex, uv, weightedColor);
  }

  if (!ubo.showVariance) {
    imageStore(aTrousOutputTex, uv, weightedColor);
  } else {
    imageStore(aTrousOutputTex, uv, vec4(varianceAtUV, 0, 0, 1));
  }
}
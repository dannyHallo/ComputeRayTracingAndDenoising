#version 450

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

const float epsilon = 1e-8;

// standard 3x3 filtering kernel from q2rtx
const float waveletFac      = 0.5;
const float kernel3x3[2][2] = {{1.0, waveletFac},
                               {waveletFac, waveletFac *waveletFac}};

const vec3 rgbToLuminanceMat = vec3(0.2989, 0.5870, 0.1140);

// bigger phi indicates bigger tolerence to apply blur
layout(binding = 0) uniform UniformBufferObject {
  bool bypassBluring;
  uint currentSample;
  int i;
  int iCap; // ranged from 0 - 5
  bool showVariance;
  bool useVarianceGuidedFiltering;
  float phiLuminance;
  float phiDepth;
  float phiNormal;
  bool ignoreLuminanceAtFirstIteration;
  bool changingLuminancePhi;
  bool useJittering;
}
ubo;

layout(binding = 1, rgba8) readonly uniform image2D aTrousInputTex;
layout(binding = 2, rgba8) readonly uniform image2D normalTex;
layout(binding = 3, r32f) readonly uniform image2D depthTex;
layout(binding = 4, rg32f) readonly uniform image2D gradientTex;
layout(binding = 5, r32f) readonly uniform image2D varianceTex;
layout(binding = 6, rgba8) writeonly uniform image2D accumTex;
layout(binding = 7, rgba8) writeonly uniform image2D aTrousOutputTex;

// #include "include/random.glsl"
#include "include/plasticRandom.glsl"

ivec2 uv;
vec2 gradientAtUV;
vec3 normalAtUV;
float luminanceAtUV, depthAtUV, varianceAtUV;

ivec2 jittering(int stepSize) {
  vec2 ldsNoise = ldsNoise2d(ubo.currentSample * 19937 + ubo.i + uv.x,
                             ubo.currentSample * 19937 + ubo.i + uv.y);
  ldsNoise -= 0.5;
  ldsNoise *= 0.5;
  ivec2 jitter = ivec2(ldsNoise * stepSize);
  return jitter;
}

void blurKernel(ivec2 dispatchXY, int kernalHalfSize, inout float weightSum,
                inout vec4 sumOfWeightedValues) {
  int stepSize   = 1 << ubo.i;
  ivec2 offsetXY = dispatchXY * stepSize;
  if (ubo.useJittering && dispatchXY != ivec2(0)) {
    offsetXY += jittering(stepSize);
  }

  float weightK = kernel3x3[abs(dispatchXY.x)][abs(dispatchXY.y)];

  float luminanceAtSample =
      dot(rgbToLuminanceMat, imageLoad(aTrousInputTex, uv + offsetXY).xyz);

  float differenceInColorVec = abs(luminanceAtSample - luminanceAtUV);

  float phiC = ubo.phiLuminance;
  if (ubo.changingLuminancePhi) {
    phiC = pow(2, -ubo.i) * ubo.phiLuminance;
  }
  float weightC = 0;
  if (ubo.useVarianceGuidedFiltering) {
    phiC *= 100.;
    weightC = exp(-differenceInColorVec /
                  max(phiC * sqrt(abs(varianceAtUV)), epsilon));
  } else {
    weightC = exp(-differenceInColorVec / phiC);
  }
  if (ubo.ignoreLuminanceAtFirstIteration && ubo.i == 0) {
    weightC = 1.0;
  }

  vec3 normalAtSample = imageLoad(normalTex, uv + offsetXY).xyz;
  float weightN = max(0., pow(dot(normalAtSample, normalAtUV), ubo.phiNormal));

  float depthAtSample     = imageLoad(depthTex, uv + offsetXY).x;
  float differenceInDepth = abs((depthAtUV - depthAtSample));
  // float differenceInDepth =
  //     abs((depthAtUV - depthAtSample) - dot(gradientAtUV, vec2(offsetXY)));
  float weightZ = exp(-differenceInDepth / ubo.phiDepth);

  float weight = weightK * weightC * weightN * weightZ;

  weightSum += weight;
  sumOfWeightedValues += weight * imageLoad(aTrousInputTex, uv + offsetXY);
}

void main() {
  uv             = ivec2(gl_GlobalInvocationID.xy);
  vec4 colorAtUV = imageLoad(aTrousInputTex, uv);

  if (ubo.bypassBluring || ubo.i >= ubo.iCap) {
    if (ubo.i == 0) {
      imageStore(accumTex, uv, colorAtUV);
    }
    imageStore(aTrousOutputTex, uv, colorAtUV);
    return;
  }

  luminanceAtUV = dot(rgbToLuminanceMat, colorAtUV.xyz);
  normalAtUV    = imageLoad(normalTex, uv).xyz;
  depthAtUV     = imageLoad(depthTex, uv).x;
  gradientAtUV  = imageLoad(gradientTex, uv).xy;
  varianceAtUV  = imageLoad(varianceTex, uv).x; // TODO: gaussian might be needed here

  const int kernelSize     = 3;
  const int kernalHalfSize = 1;

  float weightSum          = 0;
  vec4 sumOfWeightedValues = vec4(0);
  for (int indexX = -kernalHalfSize; indexX <= kernalHalfSize; indexX++) {
    for (int indexY = -kernalHalfSize; indexY <= kernalHalfSize; indexY++) {
      blurKernel(ivec2(indexX, indexY), kernalHalfSize, weightSum,
                 sumOfWeightedValues);
    }
  }

  vec4 weightedColor = sumOfWeightedValues / weightSum;

  varianceAtUV = min(varianceAtUV * 10, 1);

  if (ubo.i == 0) {
    imageStore(accumTex, uv, weightedColor);
  }

  if (!ubo.showVariance) {
    imageStore(aTrousOutputTex, uv, weightedColor);
  } else {
    imageStore(aTrousOutputTex, uv, vec4(varianceAtUV, 0, 0, 1));
  }
}
#version 450

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

const float pi      = 3.1415926535897932385;
const float epsilon = 1e-8;

// const float weightsATrous3x3[3] = float[](.17, .66, .17);
const float weightsATrous5x5[5] = float[](.0625, .25, .375, .25, .0625);

const vec3 rgbToLuminanceMat = vec3(0.2989, 0.5870, 0.1140);

// bigger phi indicates bigger tolerence to apply blur
layout(binding = 0) uniform UniformBufferObject {
  bool bypassBluring;
  int i;
  int iCap; // ranged from 0 - 5
  bool showVariance;
  bool useVarianceGuidedFiltering;
  float phiLuminance;
  float phiDepth;
  float phiNormal;
  float centralKernelWeight;
  bool useThreeByThreeKernel;
  bool ignoreLuminanceAtFirstIteration;
  bool changingLuminancePhi;
}
ubo;

layout(binding = 1, rgba8) readonly uniform image2D aTrousInputTex;
layout(binding = 2, rgba8) readonly uniform image2D normalTex;
layout(binding = 3, r32f) readonly uniform image2D depthTex;
layout(binding = 4, rg32f) readonly uniform image2D gradientTex;
layout(binding = 5, rg32f) readonly uniform image2D varianceTex;
layout(binding = 6, rgba8) writeonly uniform image2D aTrousOutputTex;

ivec2 uv;
vec2 gradientAtUV;
vec3 normalAtUV;
float luminanceAtUV, depthAtUV, varianceAtUV;

void blurKernel(int indexX, int indexY, int kernalHalfSize,
                inout float weightSum, inout vec4 sumOfWeightedValues) {
  int x = int((indexX - kernalHalfSize) * pow(2, ubo.i));
  int y = int((indexY - kernalHalfSize) * pow(2, ubo.i));

  float customizedWeightsForATrous3x3[3] =
      float[]((1 - ubo.centralKernelWeight) * 0.5, ubo.centralKernelWeight,
              (1 - ubo.centralKernelWeight) * 0.5);

  float weightK = 0;
  if (ubo.useThreeByThreeKernel) {
    weightK = customizedWeightsForATrous3x3[indexX] *
              customizedWeightsForATrous3x3[indexY];
  } else {
    weightK = weightsATrous5x5[indexX] * weightsATrous5x5[indexY];
  }

  float luminanceAtSample =
      dot(rgbToLuminanceMat, imageLoad(aTrousInputTex, uv + ivec2(x, y)).xyz);

  float differenceInColorVec = abs(luminanceAtSample - luminanceAtUV);

  float phiC = ubo.phiLuminance;
  if (ubo.changingLuminancePhi) {
    phiC = pow(2, -ubo.i) * ubo.phiLuminance;
  }
  float weightC = 0;
  if (ubo.useVarianceGuidedFiltering) {
    weightC =
        exp(-differenceInColorVec / (phiC * sqrt(abs(varianceAtUV)) + epsilon));
  } else {
    weightC = exp(-differenceInColorVec / phiC);
  }
  if (ubo.ignoreLuminanceAtFirstIteration && ubo.i == 0) {
    weightC = 1.0;
  }

  vec3 normalAtSample = imageLoad(normalTex, uv + ivec2(x, y)).xyz;
  float weightN = max(0., pow(dot(normalAtSample, normalAtUV), ubo.phiNormal));

  float depthAtSample = imageLoad(depthTex, uv + ivec2(x, y)).x;
  float differenceInDepth =
      abs((depthAtUV - depthAtSample) - dot(gradientAtUV, vec2(x, y)));
  float weightZ = exp(-differenceInDepth / ubo.phiDepth);

  float weight = weightK * weightN * weightC * weightZ;

  weightSum += weight;
  sumOfWeightedValues += weight * imageLoad(aTrousInputTex, uv + ivec2(x, y));
}

void main() {
  uv             = ivec2(gl_GlobalInvocationID.xy);
  vec4 colorAtUV = imageLoad(aTrousInputTex, uv);

  if (ubo.i >= ubo.iCap) {
    imageStore(aTrousOutputTex, uv, imageLoad(aTrousInputTex, uv));
    return;
  }

  luminanceAtUV = dot(rgbToLuminanceMat, colorAtUV.xyz);
  normalAtUV    = imageLoad(normalTex, uv).xyz;
  depthAtUV     = imageLoad(depthTex, uv).x;
  gradientAtUV  = imageLoad(gradientTex, uv).xy;
  varianceAtUV  = imageLoad(varianceTex, uv).y; // TODO: gaussian is needed here

  if (ubo.bypassBluring) {
    imageStore(aTrousOutputTex, uv, colorAtUV);
    return;
  }

  int kernelSize     = ubo.useThreeByThreeKernel ? 3 : 5;
  int kernalHalfSize = (kernelSize - 1) / 2;

  float weightSum          = 0;
  vec4 sumOfWeightedValues = vec4(0);
  for (int indexX = 0; indexX < kernelSize; indexX++) {
    for (int indexY = 0; indexY < kernelSize; indexY++) {
      blurKernel(indexX, indexY, kernalHalfSize, weightSum,
                 sumOfWeightedValues);
    }
  }

  vec4 weightedColor = sumOfWeightedValues / weightSum;

  varianceAtUV = min(varianceAtUV * 50, 1);
  if (!ubo.showVariance) {
    imageStore(aTrousOutputTex, uv, weightedColor);
    return;
  }
  imageStore(aTrousOutputTex, uv, vec4(varianceAtUV, 0, 0, 1));
}
#version 450
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// layout(binding = 1) uniform UniformBufferObject { uint a; }
// ubo;

layout(binding = 1, rgba32f) writeonly uniform image2D rawTex;

#include "include/definitions.glsl"
#include "include/globalUbo.glsl" // defines layout 0

const int MAX_ITER    = 100;
const uint kMaxLevels = 10u;

struct Ray {
  vec3 origin;
  vec3 dir;
};

const uint voxel_buffer[] = uint[](
    0x00013300u, 0x00053300u, 0x00093300u, 0x000D3300u, 0x00113300u, 0x00153300u, 0x00193300u,
    0x001D3300u, 0x00213300u, 0x00253300u, 0x00293300u, 0x002D3300u, 0x00313300u, 0x00353300u,
    0x00393300u, 0x003D3300u, 0x00413300u, 0x00453300u, 0x00493300u, 0x004D3300u, 0x00513300u,
    0x00553300u, 0x00593300u, 0x005D3300u, 0x00613300u, 0x00653300u, 0x00693300u, 0x006D3300u,
    0x00713300u, 0x00753300u, 0x00793300u, 0x007D3300u, 0x00813300u, 0x00853300u, 0x00893300u,
    0x008D3300u, 0x00913300u, 0x00953300u, 0x00993300u, 0x009D3300u, 0x00A13300u, 0x00A53300u,
    0x00A93300u, 0x00AD3300u, 0x00B13300u, 0x00B53300u, 0x00B93300u, 0x00BD3300u, 0x00C13300u,
    0x00C53300u, 0x00C93300u, 0x00CD3300u, 0x00D13300u, 0x00D53300u, 0x00D93300u, 0x00DD3300u,
    0x00E13300u, 0x00E53300u, 0x00E93300u, 0x00ED3300u, 0x00F13300u, 0x00F53300u, 0x00F93300u,
    0x00FD3300u, 0x01013300u, 0x01053300u, 0x01093300u, 0x010D3300u, 0x01113300u, 0x01153300u,
    0x01193300u, 0x011D3300u, 0x01213300u, 0x01253300u, 0x01293300u, 0x012D3300u, 0x01313300u,
    0x01353300u, 0x01393300u, 0x013D3300u, 0x01413300u, 0x01453300u, 0x01493300u, 0x014D3300u,
    0x01513300u, 0x0155CC00u, 0x0159CC00u, 0x015DCC00u, 0x0161CC00u, 0x0165CC00u, 0x0169CC00u,
    0x016DCC00u, 0x0171CC00u, 0x0175CC00u, 0x0179CC00u, 0x017DCC00u, 0x0181CC00u, 0x0185CC00u,
    0x0189CC00u, 0x018DCC00u, 0x0191CC00u, 0x0195CC00u, 0x0199CC00u, 0x019DCC00u, 0x01A1CC00u,
    0x01A5CC00u, 0x01A9CC00u, 0x01ADCC00u, 0x01B1CC00u, 0x01B5CC00u, 0x01B9CC00u, 0x01BDCC00u,
    0x01C1CC00u, 0x01C5CC00u, 0x01C9CC00u, 0x01CDCC00u, 0x01D1CC00u, 0x01D5CC00u, 0x01D9CC00u,
    0x01DDCC00u, 0x01E1CC00u, 0x01E5CC00u, 0x01E9CC00u, 0x01EDCC00u, 0x01F1CC00u, 0x01F5CC00u,
    0x01F9CC00u, 0x01FDCC00u, 0x0201CC00u, 0x0205CC00u, 0x0209CC00u, 0x020DCC00u, 0x0211CC00u,
    0x0215CC00u, 0x0219CC00u, 0x021DCC00u, 0x0221CC00u, 0x0225CC00u, 0x0229CC00u, 0x022DCC00u,
    0x0231CC00u, 0x0235CC00u, 0x0239CC00u, 0x023DCC00u, 0x0241CC00u, 0x0245CC00u, 0x0249CC00u,
    0x024DCC00u, 0x0251CC00u, 0x0255CC00u, 0x0259CC00u, 0x025DCC00u, 0x0261CC00u, 0x0265CC00u,
    0x0269CC00u, 0x026DCC00u, 0x0271CC00u, 0x0275CC00u, 0x0279CC00u, 0x027DCC00u, 0x0281CC00u,
    0x0285CC00u, 0x0289CC00u, 0x028DCC00u, 0x0291CC00u, 0x0295CC00u, 0x0299CC00u, 0x029DCC00u,
    0x02A1CC00u, 0x02A5CC00u, 0x02A9CC00u, 0x02ADCC00u, 0x02B1CC00u, 0x02B5CC00u, 0x02B9CC00u,
    0x02BDCC00u, 0x02C1CC00u, 0x02C5CC00u, 0x02C9CC00u, 0x02CDCC00u, 0x02D1CC00u, 0x02D5CC00u,
    0x02D9CC00u, 0x02DDCC00u, 0x02E1CC00u, 0x02E5CC00u, 0x02E9CC00u, 0x02EDCC00u, 0x02F1CC00u,
    0x02F5CC00u, 0x02F9CC00u, 0x02FDCC00u, 0x0301CC00u, 0x0305CC00u, 0x0309CC00u, 0x030DCC00u,
    0x0311CC00u, 0x0315CC00u, 0x0319CC00u, 0x031DCC00u, 0x0321CC00u, 0x0325CC00u, 0x0329CC00u,
    0x032DCC00u, 0x0331CC00u, 0x0335CC00u, 0x0339CC00u, 0x033DCC00u, 0x0341CC00u, 0x0345CC00u,
    0x0349CC00u, 0x034DCC00u, 0x0351CC00u, 0x0355CC00u, 0x0359CC00u, 0x035DCC00u, 0x0361CC00u,
    0x0365CC00u, 0x0369CC00u, 0x036DCC00u, 0x0371CC00u, 0x0375CC00u, 0x0379CC00u, 0x037DCC00u,
    0x0381CC00u, 0x0385CC00u, 0x0389CC00u, 0x038DCC00u, 0x0391CC00u, 0x0395CC00u, 0x0399CC00u,
    0x039DCC00u, 0x03A1CC00u, 0x03A5CC00u, 0x03A9CC00u, 0x03ADCC00u, 0x03B1CC00u, 0x03B5CC00u,
    0x03B9CC00u, 0x03BDCC00u, 0x03C1CC00u, 0x03C5CC00u, 0x03C9CC00u, 0x03CDCC00u, 0x03D1CC00u,
    0x03D5CC00u, 0x03D9CC00u, 0x03DDCC00u, 0x03E1CC00u, 0x03E5CC00u, 0x03E9CC00u, 0x03EDCC00u,
    0x03F1CC00u, 0x03F5CC00u, 0x03F9CC00u, 0x03FDCC00u, 0x0401CC00u, 0x0405CC00u, 0x0409CC00u,
    0x040DCC00u, 0x0411CC00u, 0x0415CC00u, 0x0419CC00u, 0x041DCC00u, 0x0421CC00u, 0x0425CC00u,
    0x0429CC00u, 0x042DCC00u, 0x0431CC00u, 0x0435CC00u, 0x0439CC00u, 0x043DCC00u, 0x0441CC00u,
    0x0445CC00u, 0x0449CC00u, 0x044DCC00u, 0x0451CC00u, 0x0455CC00u, 0x0459CC00u, 0x045DCC00u,
    0x0461CC00u, 0x0465CC00u, 0x0469CC00u, 0x046DCC00u, 0x0471CC00u, 0x0475CC00u, 0x0479CC00u,
    0x047DCC00u, 0x0481CC00u, 0x0485CC00u, 0x0489CC00u, 0x048DCC00u, 0x0491CC00u, 0x0495CC00u,
    0x0499CC00u, 0x049DCC00u, 0x04A1CC00u, 0x04A5CC00u, 0x04A9CC00u, 0x04ADCC00u, 0x04B1CC00u,
    0x04B5CC00u, 0x04B9CC00u, 0x04BDCC00u, 0x04C1CC00u, 0x04C5CC00u, 0x04C9CC00u, 0x04CDCC00u,
    0x04D1CC00u, 0x04D5CC00u, 0x04D9CC00u, 0x04DDCC00u, 0x04E1CC00u, 0x04E5CC00u, 0x04E9CC00u,
    0x04EDCC00u, 0x04F1CC00u, 0x04F5CC00u, 0x04F9CC00u, 0x04FDCC00u, 0x0501CC00u, 0x0505CC00u,
    0x0509CC00u, 0x050DCC00u, 0x0511CC00u, 0x0515CC00u, 0x0519CC00u, 0x051DCC00u, 0x0521CC00u,
    0x0525CC00u, 0x0529CC00u, 0x052DCC00u, 0x0531CC00u, 0x0535CC00u, 0x0539CC00u, 0x053DCC00u,
    0x0541CC00u, 0x0545CC00u, 0x0549CC00u, 0x054DCC00u, 0x0551CC00u, 0x0555FFFFu, 0x055DFFFFu,
    0x0565FFFFu, 0x056DFFFFu, 0x0575FFFFu, 0x057DFFFFu, 0x0585FFFFu, 0x058DFFFFu, 0x0595FFFFu,
    0x059DFFFFu, 0x05A5FFFFu, 0x05ADFFFFu, 0x05B5FFFFu, 0x05BDFFFFu, 0x05C5FFFFu, 0x05CDFFFFu,
    0x05D5FFFFu, 0x05DDFFFFu, 0x05E5FFFFu, 0x05EDFFFFu, 0x05F5FFFFu, 0x05FDFFFFu, 0x0605FFFFu,
    0x060DFFFFu, 0x0615FFFFu, 0x061DFFFFu, 0x0625FFFFu, 0x062DFFFFu, 0x0635FFFFu, 0x063DFFFFu,
    0x0645FFFFu, 0x064DFFFFu, 0x0655FFFFu, 0x065DFFFFu, 0x0665FFFFu, 0x066DFFFFu, 0x0675FFFFu,
    0x067DFFFFu, 0x0685FFFFu, 0x068DFFFFu, 0x0695FFFFu, 0x069DFFFFu, 0x06A5FFFFu, 0x06ADFFFFu,
    0x06B5FFFFu, 0x06BDFFFFu, 0x06C5FFFFu, 0x06CDFFFFu, 0x06D5FFFFu, 0x06DDFFFFu, 0x06E5FFFFu,
    0x06EDFFFFu, 0x06F5FFFFu, 0x06FDFFFFu, 0x0705FFFFu, 0x070DFFFFu, 0x0715FFFFu, 0x071DFFFFu,
    0x0725FFFFu, 0x072DFFFFu, 0x0735FFFFu, 0x073DFFFFu, 0x0745FFFFu, 0x074DFFFFu, 0x0755FFFFu,
    0x075DFFFFu, 0x0765FFFFu, 0x076DFFFFu, 0x0775FFFFu, 0x077DFFFFu, 0x0785FFFFu, 0x078DFFFFu,
    0x0795FFFFu, 0x079DFFFFu, 0x07A5FFFFu, 0x07ADFFFFu, 0x07B5FFFFu, 0x07BDFFFFu, 0x07C5FFFFu,
    0x07CDFFFFu, 0x07D5FFFFu, 0x07DDFFFFu, 0x07E5FFFFu, 0x07EDFFFFu, 0x07F5FFFFu, 0x07FDFFFFu,
    0x0805FFFFu, 0x080DFFFFu, 0x0815FFFFu, 0x081DFFFFu, 0x0825FFFFu, 0x082DFFFFu, 0x0835FFFFu,
    0x083DFFFFu, 0x0845FFFFu, 0x084DFFFFu, 0x0855FFFFu, 0x085DFFFFu, 0x0865FFFFu, 0x086DFFFFu,
    0x0875FFFFu, 0x087DFFFFu, 0x0885FFFFu, 0x088DFFFFu, 0x0895FFFFu, 0x089DFFFFu, 0x08A5FFFFu,
    0x08ADFFFFu, 0x08B5FFFFu, 0x08BDFFFFu, 0x08C5FFFFu, 0x08CDFFFFu, 0x08D5FFFFu, 0x08DDFFFFu,
    0x08E5FFFFu, 0x08EDFFFFu, 0x08F5FFFFu, 0x08FDFFFFu, 0x0905FFFFu, 0x090DFFFFu, 0x0915FFFFu,
    0x091DFFFFu, 0x0925FFFFu, 0x092DFFFFu, 0x0935FFFFu, 0x093DFFFFu, 0x0945FFFFu, 0x094DFFFFu,
    0x0955FFFFu, 0x095DFFFFu, 0x0965FFFFu, 0x096DFFFFu, 0x0975FFFFu, 0x097DFFFFu, 0x0985FFFFu,
    0x098DFFFFu, 0x0995FFFFu, 0x099DFFFFu, 0x09A5FFFFu, 0x09ADFFFFu, 0x09B5FFFFu, 0x09BDFFFFu,
    0x09C5FFFFu, 0x09CDFFFFu, 0x09D5FFFFu, 0x09DDFFFFu, 0x09E5FFFFu, 0x09EDFFFFu, 0x09F5FFFFu,
    0x09FDFFFFu, 0x0A05FFFFu, 0x0A0DFFFFu, 0x0A15FFFFu, 0x0A1DFFFFu, 0x0A25FFFFu, 0x0A2DFFFFu,
    0x0A35FFFFu, 0x0A3DFFFFu, 0x0A45FFFFu, 0x0A4DFFFFu, 0x0A55FFFFu, 0x0A5DFFFFu, 0x0A65FFFFu,
    0x0A6DFFFFu, 0x0A75FFFFu, 0x0A7DFFFFu, 0x0A85FFFFu, 0x0A8DFFFFu, 0x0A95FFFFu, 0x0A9DFFFFu,
    0x0AA5FFFFu, 0x0AADFFFFu, 0x0AB5FFFFu, 0x0ABDFFFFu, 0x0AC5FFFFu, 0x0ACDFFFFu, 0x0AD5FFFFu,
    0x0ADDFFFFu, 0x0AE5FFFFu, 0x0AEDFFFFu, 0x0AF5FFFFu, 0x0AFDFFFFu, 0x0B05FFFFu, 0x0B0DFFFFu,
    0x0B15FFFFu, 0x0B1DFFFFu, 0x0B25FFFFu, 0x0B2DFFFFu, 0x0B35FFFFu, 0x0B3DFFFFu, 0x0B45FFFFu,
    0x0B4DFFFFu, 0x0B55FFFFu, 0x0B5DFFFFu, 0x0B65FFFFu, 0x0B6DFFFFu, 0x0B75FFFFu, 0x0B7DFFFFu,
    0x0B85FFFFu, 0x0B8DFFFFu, 0x0B95FFFFu, 0x0B9DFFFFu, 0x0BA5FFFFu, 0x0BADFFFFu, 0x0BB5FFFFu,
    0x0BBDFFFFu, 0x0BC5FFFFu, 0x0BCDFFFFu, 0x0BD5FFFFu, 0x0BDDFFFFu, 0x0BE5FFFFu, 0x0BEDFFFFu,
    0x0BF5FFFFu, 0x0BFDFFFFu, 0x0C05FFFFu, 0x0C0DFFFFu, 0x0C15FFFFu, 0x0C1DFFFFu, 0x0C25FFFFu,
    0x0C2DFFFFu, 0x0C35FFFFu, 0x0C3DFFFFu, 0x0C45FFFFu, 0x0C4DFFFFu, 0x0C55FFFFu, 0x0C5DFFFFu,
    0x0C65FFFFu, 0x0C6DFFFFu, 0x0C75FFFFu, 0x0C7DFFFFu, 0x0C85FFFFu, 0x0C8DFFFFu, 0x0C95FFFFu,
    0x0C9DFFFFu, 0x0CA5FFFFu, 0x0CADFFFFu, 0x0CB5FFFFu, 0x0CBDFFFFu, 0x0CC5FFFFu, 0x0CCDFFFFu,
    0x0CD5FFFFu, 0x0CDDFFFFu, 0x0CE5FFFFu, 0x0CEDFFFFu, 0x0CF5FFFFu, 0x0CFDFFFFu, 0x0D05FFFFu,
    0x0D0DFFFFu, 0x0D15FFFFu, 0x0D1DFFFFu, 0x0D25FFFFu, 0x0D2DFFFFu, 0x0D35FFFFu, 0x0D3DFFFFu,
    0x0D45FFFFu, 0x0D4DFFFFu, 0x0D55FFFFu, 0x0D5DFFFFu, 0x0D65FFFFu, 0x0D6DFFFFu, 0x0D75FFFFu,
    0x0D7DFFFFu, 0x0D85FFFFu, 0x0D8DFFFFu, 0x0D95FFFFu, 0x0D9DFFFFu, 0x0DA5FFFFu, 0x0DADFFFFu,
    0x0DB5FFFFu, 0x0DBDFFFFu, 0x0DC5FFFFu, 0x0DCDFFFFu, 0x0DD5FFFFu, 0x0DDDFFFFu, 0x0DE5FFFFu,
    0x0DEDFFFFu, 0x0DF5FFFFu, 0x0DFDFFFFu, 0x0E05FFFFu, 0x0E0DFFFFu, 0x0E15FFFFu, 0x0E1DFFFFu,
    0x0E25FFFFu, 0x0E2DFFFFu, 0x0E35FFFFu, 0x0E3DFFFFu, 0x0E45FFFFu, 0x0E4DFFFFu, 0x0E55FFFFu,
    0x0E5DFFFFu, 0x0E65FFFFu, 0x0E6DFFFFu, 0x0E75FFFFu, 0x0E7DFFFFu, 0x0E85FFFFu, 0x0E8DFFFFu,
    0x0E95FFFFu, 0x0E9DFFFFu, 0x0EA5FFFFu, 0x0EADFFFFu, 0x0EB5FFFFu, 0x0EBDFFFFu, 0x0EC5FFFFu,
    0x0ECDFFFFu, 0x0ED5FFFFu, 0x0EDDFFFFu, 0x0EE5FFFFu, 0x0EEDFFFFu, 0x0EF5FFFFu, 0x0EFDFFFFu,
    0x0F05FFFFu, 0x0F0DFFFFu, 0x0F15FFFFu, 0x0F1DFFFFu, 0x0F25FFFFu, 0x0F2DFFFFu, 0x0F35FFFFu,
    0x0F3DFFFFu, 0x0F45FFFFu, 0x0F4DFFFFu, 0x0F55FFFFu, 0x0F5DFFFFu, 0x0F65FFFFu, 0x0F6DFFFFu,
    0x0F75FFFFu, 0x0F7DFFFFu, 0x0F85FFFFu, 0x0F8DFFFFu, 0x0F95FFFFu, 0x0F9DFFFFu, 0x0FA5FFFFu,
    0x0FADFFFFu, 0x0FB5FFFFu, 0x0FBDFFFFu, 0x0FC5FFFFu, 0x0FCDFFFFu, 0x0FD5FFFFu, 0x0FDDFFFFu,
    0x0FE5FFFFu, 0x0FEDFFFFu, 0x0FF5FFFFu, 0x0FFDFFFFu, 0x1005FFFFu, 0x100DFFFFu, 0x1015FFFFu,
    0x101DFFFFu, 0x1025FFFFu, 0x102DFFFFu, 0x1035FFFFu, 0x103DFFFFu, 0x1045FFFFu, 0x104DFFFFu,
    0x1055FFFFu, 0x105DFFFFu, 0x1065FFFFu, 0x106DFFFFu, 0x1075FFFFu, 0x107DFFFFu, 0x1085FFFFu,
    0x108DFFFFu, 0x1095FFFFu, 0x109DFFFFu, 0x10A5FFFFu, 0x10ADFFFFu, 0x10B5FFFFu, 0x10BDFFFFu,
    0x10C5FFFFu, 0x10CDFFFFu, 0x10D5FFFFu, 0x10DDFFFFu, 0x10E5FFFFu, 0x10EDFFFFu, 0x10F5FFFFu,
    0x10FDFFFFu, 0x1105FFFFu, 0x110DFFFFu, 0x1115FFFFu, 0x111DFFFFu, 0x1125FFFFu, 0x112DFFFFu,
    0x1135FFFFu, 0x113DFFFFu, 0x1145FFFFu, 0x114DFFFFu, 0x1155FFFFu, 0x115DFFFFu, 0x1165FFFFu,
    0x116DFFFFu, 0x1175FFFFu, 0x117DFFFFu, 0x1185FFFFu, 0x118DFFFFu, 0x1195FFFFu, 0x119DFFFFu,
    0x11A5FFFFu, 0x11ADFFFFu, 0x11B5FFFFu, 0x11BDFFFFu, 0x11C5FFFFu, 0x11CDFFFFu, 0x11D5FFFFu,
    0x11DDFFFFu, 0x11E5FFFFu, 0x11EDFFFFu, 0x11F5FFFFu, 0x11FDFFFFu, 0x1205FFFFu, 0x120DFFFFu,
    0x1215FFFFu, 0x121DFFFFu, 0x1225FFFFu, 0x122DFFFFu, 0x1235FFFFu, 0x123DFFFFu, 0x1245FFFFu,
    0x124DFFFFu, 0x1255FFFFu, 0x125DFFFFu, 0x1265FFFFu, 0x126DFFFFu, 0x1275FFFFu, 0x127DFFFFu,
    0x1285FFFFu, 0x128DFFFFu, 0x1295FFFFu, 0x129DFFFFu, 0x12A5FFFFu, 0x12ADFFFFu, 0x12B5FFFFu,
    0x12BDFFFFu, 0x12C5FFFFu, 0x12CDFFFFu, 0x12D5FFFFu, 0x12DDFFFFu, 0x12E5FFFFu, 0x12EDFFFFu,
    0x12F5FFFFu, 0x12FDFFFFu, 0x1305FFFFu, 0x130DFFFFu, 0x1315FFFFu, 0x131DFFFFu, 0x1325FFFFu,
    0x132DFFFFu, 0x1335FFFFu, 0x133DFFFFu, 0x1345FFFFu, 0x134DFFFFu, 0x1355FFFFu, 0x135DFFFFu,
    0x1365FFFFu, 0x136DFFFFu, 0x1375FFFFu, 0x137DFFFFu, 0x1385FFFFu, 0x138DFFFFu, 0x1395FFFFu,
    0x139DFFFFu, 0x13A5FFFFu, 0x13ADFFFFu, 0x13B5FFFFu, 0x13BDFFFFu, 0x13C5FFFFu, 0x13CDFFFFu,
    0x13D5FFFFu, 0x13DDFFFFu, 0x13E5FFFFu, 0x13EDFFFFu, 0x13F5FFFFu, 0x13FDFFFFu, 0x1405FFFFu,
    0x140DFFFFu, 0x1415FFFFu, 0x141DFFFFu, 0x1425FFFFu, 0x142DFFFFu, 0x1435FFFFu, 0x143DFFFFu,
    0x1445FFFFu, 0x144DFFFFu, 0x1455FFFFu, 0x145DFFFFu, 0x1465FFFFu, 0x146DFFFFu, 0x1475FFFFu,
    0x147DFFFFu, 0x1485FFFFu, 0x148DFFFFu, 0x1495FFFFu, 0x149DFFFFu, 0x14A5FFFFu, 0x14ADFFFFu,
    0x14B5FFFFu, 0x14BDFFFFu, 0x14C5FFFFu, 0x14CDFFFFu, 0x14D5FFFFu, 0x14DDFFFFu, 0x14E5FFFFu,
    0x14EDFFFFu, 0x14F5FFFFu, 0x14FDFFFFu, 0x1505FFFFu, 0x150DFFFFu, 0x1515FFFFu, 0x151DFFFFu,
    0x1525FFFFu, 0x152DFFFFu, 0x1535FFFFu, 0x153DFFFFu, 0x1545FFFFu, 0x154DFFFFu, 0x1555FFFFu,
    0x155DFFFFu, 0x1565FFFFu, 0x156DFFFFu, 0x1575FFFFu, 0x157DFFFFu, 0x1585FFFFu, 0x158DFFFFu,
    0x1595FFFFu, 0x159DFFFFu, 0x15A5FFFFu, 0x15ADFFFFu, 0x15B5FFFFu, 0x15BDFFFFu, 0x15C5FFFFu,
    0x15CDFFFFu, 0x15D5FFFFu, 0x15DDFFFFu, 0x15E5FFFFu, 0x15EDFFFFu, 0x15F5FFFFu, 0x15FDFFFFu,
    0x1605FFFFu, 0x160DFFFFu, 0x1615FFFFu, 0x161DFFFFu, 0x1625FFFFu, 0x162DFFFFu, 0x1635FFFFu,
    0x163DFFFFu, 0x1645FFFFu, 0x164DFFFFu, 0x1655FFFFu, 0x165DFFFFu, 0x1665FFFFu, 0x166DFFFFu,
    0x1675FFFFu, 0x167DFFFFu, 0x1685FFFFu, 0x168DFFFFu, 0x1695FFFFu, 0x169DFFFFu, 0x16A5FFFFu,
    0x16ADFFFFu, 0x16B5FFFFu, 0x16BDFFFFu, 0x16C5FFFFu, 0x16CDFFFFu, 0x16D5FFFFu, 0x16DDFFFFu,
    0x16E5FFFFu, 0x16EDFFFFu, 0x16F5FFFFu, 0x16FDFFFFu, 0x1705FFFFu, 0x170DFFFFu, 0x1715FFFFu,
    0x171DFFFFu, 0x1725FFFFu, 0x172DFFFFu, 0x1735FFFFu, 0x173DFFFFu, 0x1745FFFFu, 0x174DFFFFu,
    0x1755FFFFu, 0x175DFFFFu, 0x1765FFFFu, 0x176DFFFFu, 0x1775FFFFu, 0x177DFFFFu, 0x1785FFFFu,
    0x178DFFFFu, 0x1795FFFFu, 0x179DFFFFu, 0x17A5FFFFu, 0x17ADFFFFu, 0x17B5FFFFu, 0x17BDFFFFu,
    0x17C5FFFFu, 0x17CDFFFFu, 0x17D5FFFFu, 0x17DDFFFFu, 0x17E5FFFFu, 0x17EDFFFFu, 0x17F5FFFFu,
    0x17FDFFFFu, 0x1805FFFFu, 0x180DFFFFu, 0x1815FFFFu, 0x181DFFFFu, 0x1825FFFFu, 0x182DFFFFu,
    0x1835FFFFu, 0x183DFFFFu, 0x1845FFFFu, 0x184DFFFFu, 0x1855FFFFu, 0x185DFFFFu, 0x1865FFFFu,
    0x186DFFFFu, 0x1875FFFFu, 0x187DFFFFu, 0x1885FFFFu, 0x188DFFFFu, 0x1895FFFFu, 0x189DFFFFu,
    0x18A5FFFFu, 0x18ADFFFFu, 0x18B5FFFFu, 0x18BDFFFFu, 0x18C5FFFFu, 0x18CDFFFFu, 0x18D5FFFFu,
    0x18DDFFFFu, 0x18E5FFFFu, 0x18EDFFFFu, 0x18F5FFFFu, 0x18FDFFFFu, 0x1905FFFFu, 0x190DFFFFu,
    0x1915FFFFu, 0x191DFFFFu, 0x1925FFFFu, 0x192DFFFFu, 0x1935FFFFu, 0x193DFFFFu, 0x1945FFFFu,
    0x194DFFFFu, 0x1955FFFFu, 0x195DFFFFu, 0x1965FFFFu, 0x196DFFFFu, 0x1975FFFFu, 0x197DFFFFu,
    0x1985FFFFu, 0x198DFFFFu, 0x1995FFFFu, 0x199DFFFFu, 0x19A5FFFFu, 0x19ADFFFFu, 0x19B5FFFFu,
    0x19BDFFFFu, 0x19C5FFFFu, 0x19CDFFFFu, 0x19D5FFFFu, 0x19DDFFFFu, 0x19E5FFFFu, 0x19EDFFFFu,
    0x19F5FFFFu, 0x19FDFFFFu, 0x1A05FFFFu, 0x1A0DFFFFu, 0x1A15FFFFu, 0x1A1DFFFFu, 0x1A25FFFFu,
    0x1A2DFFFFu, 0x1A35FFFFu, 0x1A3DFFFFu, 0x1A45FFFFu, 0x1A4DFFFFu, 0x1A55FFFFu, 0x1A5DFFFFu,
    0x1A65FFFFu, 0x1A6DFFFFu, 0x1A75FFFFu, 0x1A7DFFFFu, 0x1A85FFFFu, 0x1A8DFFFFu, 0x1A95FFFFu,
    0x1A9DFFFFu, 0x1AA5FFFFu, 0x1AADFFFFu, 0x1AB5FFFFu, 0x1ABDFFFFu, 0x1AC5FFFFu, 0x1ACDFFFFu,
    0x1AD5FFFFu, 0x1ADDFFFFu, 0x1AE5FFFFu, 0x1AEDFFFFu, 0x1AF5FFFFu, 0x1AFDFFFFu, 0x1B05FFFFu,
    0x1B0DFFFFu, 0x1B15FFFFu, 0x1B1DFFFFu, 0x1B25FFFFu, 0x1B2DFFFFu, 0x1B35FFFFu, 0x1B3DFFFFu,
    0x1B45FFFFu, 0x1B4DFFFFu, 0x1B55FFFFu, 0x1B5DFFFFu, 0x1B65FFFFu, 0x1B6DFFFFu, 0x1B75FFFFu,
    0x1B7DFFFFu, 0x1B85FFFFu, 0x1B8DFFFFu, 0x1B95FFFFu, 0x1B9DFFFFu, 0x1BA5FFFFu, 0x1BADFFFFu,
    0x1BB5FFFFu, 0x1BBDFFFFu, 0x1BC5FFFFu, 0x1BCDFFFFu, 0x1BD5FFFFu, 0x1BDDFFFFu, 0x1BE5FFFFu,
    0x1BEDFFFFu, 0x1BF5FFFFu, 0x1BFDFFFFu, 0x1C05FFFFu, 0x1C0DFFFFu, 0x1C15FFFFu, 0x1C1DFFFFu,
    0x1C25FFFFu, 0x1C2DFFFFu, 0x1C35FFFFu, 0x1C3DFFFFu, 0x1C45FFFFu, 0x1C4DFFFFu, 0x1C55FFFFu,
    0x1C5DFFFFu, 0x1C65FFFFu, 0x1C6DFFFFu, 0x1C75FFFFu, 0x1C7DFFFFu, 0x1C85FFFFu, 0x1C8DFFFFu,
    0x1C95FFFFu, 0x1C9DFFFFu, 0x1CA5FFFFu, 0x1CADFFFFu, 0x1CB5FFFFu, 0x1CBDFFFFu, 0x1CC5FFFFu,
    0x1CCDFFFFu, 0x1CD5FFFFu, 0x1CDDFFFFu, 0x1CE5FFFFu, 0x1CEDFFFFu, 0x1CF5FFFFu, 0x1CFDFFFFu,
    0x1D05FFFFu, 0x1D0DFFFFu, 0x1D15FFFFu, 0x1D1DFFFFu, 0x1D25FFFFu, 0x1D2DFFFFu, 0x1D35FFFFu,
    0x1D3DFFFFu, 0x1D45FFFFu, 0x1D4DFFFFu, 0x1D55FFFFu, 0x1D5DFFFFu, 0x1D65FFFFu, 0x1D6DFFFFu,
    0x1D75FFFFu, 0x1D7DFFFFu, 0x1D85FFFFu, 0x1D8DFFFFu, 0x1D95FFFFu, 0x1D9DFFFFu, 0x1DA5FFFFu,
    0x1DADFFFFu, 0x1DB5FFFFu, 0x1DBDFFFFu, 0x1DC5FFFFu, 0x1DCDFFFFu, 0x1DD5FFFFu, 0x1DDDFFFFu,
    0x1DE5FFFFu, 0x1DEDFFFFu, 0x1DF5FFFFu, 0x1DFDFFFFu, 0x1E05FFFFu, 0x1E0DFFFFu, 0x1E15FFFFu,
    0x1E1DFFFFu, 0x1E25FFFFu, 0x1E2DFFFFu, 0x1E35FFFFu, 0x1E3DFFFFu, 0x1E45FFFFu, 0x1E4DFFFFu,
    0x1E55FFFFu, 0x1E5DFFFFu, 0x1E65FFFFu, 0x1E6DFFFFu, 0x1E75FFFFu, 0x1E7DFFFFu, 0x1E85FFFFu,
    0x1E8DFFFFu, 0x1E95FFFFu, 0x1E9DFFFFu, 0x1EA5FFFFu, 0x1EADFFFFu, 0x1EB5FFFFu, 0x1EBDFFFFu,
    0x1EC5FFFFu, 0x1ECDFFFFu, 0x1ED5FFFFu, 0x1EDDFFFFu, 0x1EE5FFFFu, 0x1EEDFFFFu, 0x1EF5FFFFu,
    0x1EFDFFFFu, 0x1F05FFFFu, 0x1F0DFFFFu, 0x1F15FFFFu, 0x1F1DFFFFu, 0x1F25FFFFu, 0x1F2DFFFFu,
    0x1F35FFFFu, 0x1F3DFFFFu, 0x1F45FFFFu, 0x1F4DFFFFu, 0x1F55FFFFu, 0x1F5DFFFFu, 0x1F65FFFFu,
    0x1F6DFFFFu, 0x1F75FFFFu, 0x1F7DFFFFu, 0x1F85FFFFu, 0x1F8DFFFFu, 0x1F95FFFFu, 0x1F9DFFFFu,
    0x1FA5FFFFu, 0x1FADFFFFu, 0x1FB5FFFFu, 0x1FBDFFFFu, 0x1FC5FFFFu, 0x1FCDFFFFu, 0x1FD5FFFFu,
    0x1FDDFFFFu, 0x1FE5FFFFu, 0x1FEDFFFFu, 0x1FF5FFFFu, 0x1FFDFFFFu, 0x2005FFFFu, 0x200DFFFFu,
    0x2015FFFFu, 0x201DFFFFu, 0x2025FFFFu, 0x202DFFFFu, 0x2035FFFFu, 0x203DFFFFu, 0x2045FFFFu,
    0x204DFFFFu, 0x2055FFFFu, 0x205DFFFFu, 0x2065FFFFu, 0x206DFFFFu, 0x2075FFFFu, 0x207DFFFFu,
    0x2085FFFFu, 0x208DFFFFu, 0x2095FFFFu, 0x209DFFFFu, 0x20A5FFFFu, 0x20ADFFFFu, 0x20B5FFFFu,
    0x20BDFFFFu, 0x20C5FFFFu, 0x20CDFFFFu, 0x20D5FFFFu, 0x20DDFFFFu, 0x20E5FFFFu, 0x20EDFFFFu,
    0x20F5FFFFu, 0x20FDFFFFu, 0x2105FFFFu, 0x210DFFFFu, 0x2115FFFFu, 0x211DFFFFu, 0x2125FFFFu,
    0x212DFFFFu, 0x2135FFFFu, 0x213DFFFFu, 0x2145FFFFu, 0x214DFFFFu, 0x2155FFFFu, 0x215DFFFFu,
    0x2165FFFFu, 0x216DFFFFu, 0x2175FFFFu, 0x217DFFFFu, 0x2185FFFFu, 0x218DFFFFu, 0x2195FFFFu,
    0x219DFFFFu, 0x21A5FFFFu, 0x21ADFFFFu, 0x21B5FFFFu, 0x21BDFFFFu, 0x21C5FFFFu, 0x21CDFFFFu,
    0x21D5FFFFu, 0x21DDFFFFu, 0x21E5FFFFu, 0x21EDFFFFu, 0x21F5FFFFu, 0x21FDFFFFu, 0x2205FFFFu,
    0x220DFFFFu, 0x2215FFFFu, 0x221DFFFFu, 0x2225FFFFu, 0x222DFFFFu, 0x2235FFFFu, 0x223DFFFFu,
    0x2245FFFFu, 0x224DFFFFu, 0x2255FFFFu, 0x225DFFFFu, 0x2265FFFFu, 0x226DFFFFu, 0x2275FFFFu,
    0x227DFFFFu, 0x2285FFFFu, 0x228DFFFFu, 0x2295FFFFu, 0x229DFFFFu, 0x22A5FFFFu, 0x22ADFFFFu,
    0x22B5FFFFu, 0x22BDFFFFu, 0x22C5FFFFu, 0x22CDFFFFu, 0x22D5FFFFu, 0x22DDFFFFu, 0x22E5FFFFu,
    0x22EDFFFFu, 0x22F5FFFFu, 0x22FDFFFFu, 0x2305FFFFu, 0x230DFFFFu, 0x2315FFFFu, 0x231DFFFFu,
    0x2325FFFFu, 0x232DFFFFu, 0x2335FFFFu, 0x233DFFFFu, 0x2345FFFFu, 0x234DFFFFu, 0x2355FFFFu,
    0x235DFFFFu, 0x2365FFFFu, 0x236DFFFFu, 0x2375FFFFu, 0x237DFFFFu, 0x2385FFFFu, 0x238DFFFFu,
    0x2395FFFFu, 0x239DFFFFu, 0x23A5FFFFu, 0x23ADFFFFu, 0x23B5FFFFu, 0x23BDFFFFu, 0x23C5FFFFu,
    0x23CDFFFFu, 0x23D5FFFFu, 0x23DDFFFFu, 0x23E5FFFFu, 0x23EDFFFFu, 0x23F5FFFFu, 0x23FDFFFFu,
    0x2405FFFFu, 0x240DFFFFu, 0x2415FFFFu, 0x241DFFFFu, 0x2425FFFFu, 0x242DFFFFu, 0x2435FFFFu,
    0x243DFFFFu, 0x2445FFFFu, 0x244DFFFFu, 0x2455FFFFu, 0x245DFFFFu, 0x2465FFFFu, 0x246DFFFFu,
    0x2475FFFFu, 0x247DFFFFu, 0x2485FFFFu, 0x248DFFFFu, 0x2495FFFFu, 0x249DFFFFu, 0x24A5FFFFu,
    0x24ADFFFFu, 0x24B5FFFFu, 0x24BDFFFFu, 0x24C5FFFFu, 0x24CDFFFFu, 0x24D5FFFFu, 0x24DDFFFFu,
    0x24E5FFFFu, 0x24EDFFFFu, 0x24F5FFFFu, 0x24FDFFFFu, 0x2505FFFFu, 0x250DFFFFu, 0x2515FFFFu,
    0x251DFFFFu, 0x2525FFFFu, 0x252DFFFFu, 0x2535FFFFu, 0x253DFFFFu, 0x2545FFFFu, 0x254DFFFFu);

const float[] scale_lookup = float[](1.0, 0.5, 0.25, 0.125, 0.0625, 0.03125, 0.015625, 0.0078125,
                                     0.00390625, 0.001953125, 0.0009765625, 0.00048828125);

// returns t0 and t1, also fills tmid and tmax
bool isect(out float tcmin, out float tcmax, out vec3 tmid, out vec3 tmax, vec3 pos, float size,
           Ray camRay) {
  vec3 halfSize  = vec3(0.5 * size);
  vec3 minCorner = pos - halfSize;
  vec3 maxCorner = pos + halfSize;

  // xyz components of t for the ray to get to the 3 planes of minCorner
  vec3 t1 = (minCorner - camRay.origin) / camRay.dir;
  // xyz ...
  vec3 t2   = (maxCorner - camRay.origin) / camRay.dir;
  vec3 tmin = min(t1, t2);
  tmax      = max(t1, t2);
  tmid      = (tmin + tmax) * 0.5;

  tcmin = max(tmin.x, max(tmin.y, tmin.z));
  tcmax = min(tmax.x, min(tmax.y, tmax.z));

  return tcmin <= tcmax && tcmax > 0.0;
}

uint countOnesInLastN(uint value, uint n) {
  uint mask         = 0xFFu >> (8u - n);
  uint relevantBits = value & mask;
  // bitCount is introduced after GLSL 4.00 (incl)
  return bitCount(relevantBits);
}

void fetch_voxel_buffer(out uint next_byte_offset, out bool has_voxel, out bool is_leaf,
                        uint byte_offset, uint bit_offset) {
  uint voxel_node = voxel_buffer[byte_offset];
  // 16: group offset
  next_byte_offset = voxel_node >> 16;
  // 8: child mask
  uint voxel_child_mask = (voxel_node & 0x0000FF00u) >> 8;
  // 8: leaf mask
  uint voxel_leaf_mask = voxel_node & 0x000000FFu;

  has_voxel = (voxel_child_mask & (1u << bit_offset)) != 0u;
  is_leaf   = (voxel_leaf_mask & (1u << bit_offset)) != 0u;

  if (has_voxel) {
    // bit_offset range: 0-7, so the last n range is 1-8, so we need to +1
    // the first bit '1' indicates a delta of 0, so we need to -1
    next_byte_offset += countOnesInLastN(voxel_child_mask, bit_offset + 1u) - 1u;
  }
}

// returns true if hit, false if miss
vec4 trace(out bool hit, out float tcmin, out float tcmax, out vec3 pos, out int iter_used,
           Ray camRay) {
  const vec4 kBlack   = vec4(0.0, 0.0, 0.0, 1.0);
  const vec4 kRed     = vec4(1.0, 0.0, 0.0, 1.0);
  const vec4 kGreen   = vec4(0.0, 1.0, 0.0, 1.0);
  const vec4 kBlue    = vec4(0.0, 0.0, 1.0, 1.0);
  const vec4 kMagenta = vec4(0.5, 0.2, 0.5, 1.0);

  struct ST {
    vec3 pos;
    int scale; // size = exp2(float(-scale)), a lookup table is used
    vec3 idx;
    uint ptr;
    float h;
  } stack[kMaxLevels];

  int stack_ptr = 0;
  hit           = false;

  // STEP 1: initialize
  int scale = 0;

  pos = vec3(0);
  vec3 tmid, tmax;
  bool can_push               = true;
  bool is_intersect_with_root = isect(tcmin, tcmax, tmid, tmax, pos, scale_lookup[scale], camRay);
  if (!is_intersect_with_root) {
    return kBlack;
  }

  float h = tcmax;

  // initial [PUSH], determine the first hited child (direct child of root node)
  // for x component, if tcmin < tmid.x, idx.x reverts the ray dir in x axis,
  // same for y and z
  vec3 idx = mix(-sign(camRay.dir), sign(camRay.dir), step(tmid, vec3(tcmin)));

  uint byte_offset = 0u;
  scale++;

  // move to first hitted sub-cell center
  pos += scale_lookup[scale + 1] * idx;

  iter_used = 0;
  while (iter_used++ < MAX_ITER) {
    // transform idx from [-1, 1] to [0, 1]
    vec3 idx01      = idx * .5 + .5;
    uint bit_offset = uint(dot(idx01, vec3(1., 2., 4.))); // 0-7

    isect(tcmin, tcmax, tmid, tmax, pos, scale_lookup[scale], camRay);

    uint next_byte_offset;
    bool has_voxel, is_leaf;
    // TODO: don't fetch if not necessary (store them in stack)
    fetch_voxel_buffer(next_byte_offset, has_voxel, is_leaf, byte_offset, bit_offset);

    // [PUSH] repeatedly, until empty voxel is found
    // when pushed layer reached the same level as the smallest voxel, stop
    // and return (this is temporary solution for finding the leaf)
    if (can_push && has_voxel) {
      // hits the leaf
      if (is_leaf) {
        hit = true;
        // return vec4(vec3(exp(-tcmin)), 1.0);
        return kGreen;
      }

      // tcmax is current voxel's exist time, h is parent voxel exist time
      if (tcmax < h) {
        stack[stack_ptr++] = ST(pos, scale, idx, byte_offset, h);
      }

      h = tcmax;
      scale++;

      // step: for element i of the return value, 0.0 is returned if x[i] <
      // edge[i], and 1.0 is returned otherwise.
      idx = mix(-sign(camRay.dir), sign(camRay.dir), step(tmid, vec3(tcmin)));

      byte_offset = next_byte_offset;

      pos += scale_lookup[scale + 1] * idx;
      continue;
    }

    // save the previous idx
    vec3 old = idx;

    // this is genius, for the hitted direction, if hit point is in the
    // middle, we advance to the other side, because this uses the direction
    // directly (not increment / bit flipping), if the next bit is outside of
    // the parent voxel, old will be equal to idx
    idx = mix(idx, sign(camRay.dir), equal(tmax, vec3(tcmax)));

    // idx has not changed -> [POP]
    if (idx == old) {
      // if poped all the way to the root
      // if (stack_ptr == 0 || scale == 0)
      if (stack_ptr == 0) {
        return kMagenta;
      }

      ST s        = stack[--stack_ptr]; // restore to parent Stack
      pos         = s.pos;
      scale       = s.scale;
      idx         = s.idx;
      byte_offset = s.ptr;
      h           = s.h;

      // once stack pop out, avoid pushing it in again
      can_push = false;
    }
    // idx has changed -> [ADVANCE]
    else {
      // if old = idx → stay,else → move forward in this stack
      pos += mix(vec3(0.), sign(camRay.dir), notEqual(old, idx)) * scale_lookup[scale];
      can_push = true;
    }
  }
  return kBlack;
}

vec2 rotate2d(vec2 v, float a) {
  float sinA = sin(a);
  float cosA = cos(a);
  return vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA);
}

vec3 getPixelInScreenPosByDispatch(vec2 subpixOffset) {
  const vec3 origin = globalUbo.camPos;
  const vec3 front  = globalUbo.camFront;
  const vec3 up     = globalUbo.camUp;
  const vec3 right  = globalUbo.camRight;

  const float theta           = globalUbo.vfov * kDeg2Rad;
  const float h               = tan(theta / 2);
  const float viewport_height = 2.0 * h;
  const float viewport_width =
      float(globalUbo.swapchainWidth) / float(globalUbo.swapchainHeight) * viewport_height;

  vec3 rayPropDir      = viewport_width * right - viewport_height * up;
  vec3 top_left_corner = front - rayPropDir / 2;

  vec2 uv = (gl_GlobalInvocationID.xy + subpixOffset) /
            vec2(globalUbo.swapchainWidth, globalUbo.swapchainHeight);

  return top_left_corner + viewport_width * right * uv.x - viewport_height * up * uv.y;
}

Ray rayGen(vec2 subpixOffset) {
  vec3 rayDir = normalize(getPixelInScreenPosByDispatch(subpixOffset));
  return Ray(globalUbo.camPos, rayDir);
}

void main() {
  ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
  if (uv.x >= globalUbo.swapchainWidth || uv.y >= globalUbo.swapchainHeight) {
    return;
  }

  Ray camRay = rayGen(vec2(0.5)); // no hist now

  // step 2: ray march
  float tcmin, tcmax;
  bool hit;
  vec3 pos;
  int iter_used;
  vec4 fragColor = trace(hit, tcmin, tcmax, pos, iter_used, camRay);

  // customized shading
  if (hit) {
    fragColor = vec4(vec3(float(iter_used) / 10.0), 1.0);
    // fragColor = vec4(vec3(exp(-tcmin)), 1.0);
  }
  imageStore(rawTex, uv, fragColor);
}
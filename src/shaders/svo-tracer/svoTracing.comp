#version 450
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "../include/svoTracerDescriptorSetLayouts.glsl"

#include "../include/definitions.glsl"
#include "../include/packer.glsl"
#include "../include/projection.glsl"
#include "../include/random.glsl"

vec3 decompressNormal(uint packed) {
  // extract the components
  uvec3 quantized;
  quantized.r = (packed)&0x7F;
  quantized.g = (packed >> 7) & 0x7F;
  quantized.b = (packed >> 14) & 0x7F;

  // convert back to [-1, 1] range
  vec3 normal = vec3(quantized) / 127.0 * 2.0 - 1.0;

  return normal;
}

const uint STACK_SIZE = 23;
struct StackItem {
  uint node;
  float t_max;
} stack[STACK_SIZE + 1];

// this algorithm is from here:
// https://research.nvidia.com/sites/default/files/pubs/2010-02_Efficient-Sparse-Voxel/laine2010tr1_paper.pdf

// code reference:
// https://code.google.com/archive/p/efficient-sparse-voxel-octrees/
// https://github.com/AdamYuan/SparseVoxelOctree

// design decisions:
// 1. the position range of the octree is [1, 2], because the POP function need that bit
// comparison from the floating points ranged from [0, 1]
// 2. the traversing reduces branching by mirroring the coordinate system
// 3. all eight childrens are stored if at least one is active, so the parent node masks only need
// two bits (isLeaf and hasChild), this is different from the paper, which needs 16 bits for
// that

// this marching algorithm fetches leaf properties
bool detailedMarching(out float oT, out vec3 oSurfacePos, out vec3 oTracingPos, out vec3 oColor,
                      out vec3 oNormal, out uint oIter, out uint oVoxHash, out bool lightSourceHit,
                      vec3 o, vec3 d, uint chunkBufferOffset) {
  uint parent  = 0;
  uint iter    = 0;
  uint voxHash = 0;

  // avoid division by zero
  d = max(abs(d), vec3(kEpsilon)) * sign(d);

  vec3 t_coef = 1 / -abs(d);
  vec3 t_bias = t_coef * o;

  uint oct_mask = 0u;
  if (d.x > 0) oct_mask ^= 1u, t_bias.x = 3 * t_coef.x - t_bias.x;
  if (d.y > 0) oct_mask ^= 2u, t_bias.y = 3 * t_coef.y - t_bias.y;
  if (d.z > 0) oct_mask ^= 4u, t_bias.z = 3 * t_coef.z - t_bias.z;

  // initialize the active span of t-values
  float t_min = max(max(2 * t_coef.x - t_bias.x, 2 * t_coef.y - t_bias.y), 2 * t_coef.z - t_bias.z);
  float t_max = min(min(t_coef.x - t_bias.x, t_coef.y - t_bias.y), t_coef.z - t_bias.z);
  t_min       = max(t_min, 0);
  float h     = t_max;

  uint cur = 0;
  vec3 pos = vec3(1);
  uint idx = 0;
  if (1.5f * t_coef.x - t_bias.x > t_min) {
    idx ^= 1u, pos.x = 1.5f;
  }
  if (1.5f * t_coef.y - t_bias.y > t_min) {
    idx ^= 2u, pos.y = 1.5f;
  }
  if (1.5f * t_coef.z - t_bias.z > t_min) {
    idx ^= 4u, pos.z = 1.5f;
  }

  uint scale       = STACK_SIZE - 1;
  float scale_exp2 = 0.5f;

  while (scale < STACK_SIZE) {
    ++iter;

    // parent pointer is the address of first largest sub-octree (8 in total) of the parent
    voxHash = parent + (idx ^ oct_mask);
    if (cur == 0u) cur = octreeBuffer[voxHash + chunkBufferOffset];

    vec3 t_corner = pos * t_coef - t_bias;
    float tc_max  = min(min(t_corner.x, t_corner.y), t_corner.z);

    if ((cur & 0x80000000u) != 0 && t_min <= t_max) {
      // INTERSECT
      float tv_max          = min(t_max, tc_max);
      float half_scale_exp2 = scale_exp2 * 0.5;
      vec3 t_center         = half_scale_exp2 * t_coef + t_corner;

      if (t_min <= tv_max) {
        // leaf node
        if ((cur & 0x40000000u) != 0) break;

        // PUSH
        if (tc_max < h) {
          stack[scale].node  = parent;
          stack[scale].t_max = t_max;
        }
        h = tc_max;

        parent = cur & 0x3FFFFFFFu;

        idx = 0u;
        --scale;
        scale_exp2 = half_scale_exp2;
        if (t_center.x > t_min) idx ^= 1u, pos.x += scale_exp2;
        if (t_center.y > t_min) idx ^= 2u, pos.y += scale_exp2;
        if (t_center.z > t_min) idx ^= 4u, pos.z += scale_exp2;

        cur   = 0;
        t_max = tv_max;

        continue;
      }
    }

    // ADVANCE
    uint step_mask = 0u;
    if (t_corner.x <= tc_max) step_mask ^= 1u, pos.x -= scale_exp2;
    if (t_corner.y <= tc_max) step_mask ^= 2u, pos.y -= scale_exp2;
    if (t_corner.z <= tc_max) step_mask ^= 4u, pos.z -= scale_exp2;

    // update active t-span and flip bits of the child slot index
    t_min = tc_max;
    idx ^= step_mask;

    // proceed with pop if the bit flips disagree with the ray direction
    if ((idx & step_mask) != 0) {
      // POP
      // find the highest differing bit between the two positions
      uint differing_bits = 0;
      if ((step_mask & 1u) != 0)
        differing_bits |= floatBitsToUint(pos.x) ^ floatBitsToUint(pos.x + scale_exp2);
      if ((step_mask & 2u) != 0)
        differing_bits |= floatBitsToUint(pos.y) ^ floatBitsToUint(pos.y + scale_exp2);
      if ((step_mask & 4u) != 0)
        differing_bits |= floatBitsToUint(pos.z) ^ floatBitsToUint(pos.z + scale_exp2);
      scale      = findMSB(differing_bits);
      scale_exp2 = uintBitsToFloat((scale - STACK_SIZE + 127u) << 23u); // exp2f(scale - s_max)

      // restore parent voxel from the stack
      parent = stack[scale].node;
      t_max  = stack[scale].t_max;

      // round cube position and extract child slot index
      uint shx = floatBitsToUint(pos.x) >> scale;
      uint shy = floatBitsToUint(pos.y) >> scale;
      uint shz = floatBitsToUint(pos.z) >> scale;
      pos.x    = uintBitsToFloat(shx << scale);
      pos.y    = uintBitsToFloat(shy << scale);
      pos.z    = uintBitsToFloat(shz << scale);
      idx      = (shx & 1u) | ((shy & 1u) << 1u) | ((shz & 1u) << 2u);

      // prevent same parent from being stored again and invalidate cached child descriptor
      h = 0, cur = 0;
    }
  }

  vec3 t_corner = t_coef * (pos + scale_exp2) - t_bias;

  vec3 norm = (t_corner.x > t_corner.y && t_corner.x > t_corner.z)
                  ? vec3(-1, 0, 0)
                  : (t_corner.y > t_corner.z ? vec3(0, -1, 0) : vec3(0, 0, -1));
  if ((oct_mask & 1u) == 0u) norm.x = -norm.x;
  if ((oct_mask & 2u) == 0u) norm.y = -norm.y;
  if ((oct_mask & 4u) == 0u) norm.z = -norm.z;

  // undo mirroring of the coordinate system
  if ((oct_mask & 1u) != 0u) pos.x = 3 - scale_exp2 - pos.x;
  if ((oct_mask & 2u) != 0u) pos.y = 3 - scale_exp2 - pos.y;
  if ((oct_mask & 4u) != 0u) pos.z = 3 - scale_exp2 - pos.z;

  // output results
  oSurfacePos = clamp(o + t_min * d, pos, pos + scale_exp2);
  if (norm.x != 0) oSurfacePos.x = norm.x > 0 ? pos.x + scale_exp2 + kEpsilon : pos.x - kEpsilon;
  if (norm.y != 0) oSurfacePos.y = norm.y > 0 ? pos.y + scale_exp2 + kEpsilon : pos.y - kEpsilon;
  if (norm.z != 0) oSurfacePos.z = norm.z > 0 ? pos.z + scale_exp2 + kEpsilon : pos.z - kEpsilon;
  // oNormal = norm;

  // scale_exp2 is the length of the edges of the voxel
  vec3 voxNormal = decompressNormal((cur & 0x1FFFFF00u) >> 8u);
  oTracingPos    = pos + scale_exp2 * 0.5 + 0.87 * scale_exp2 * voxNormal;
  oNormal        = voxNormal;

  // https://registry.khronos.org/OpenGL-Refpages/gl4/html/unpackUnorm.xhtml
  // uint colorIndex = cur & 0x000000FFu;
  lightSourceHit = false;
  // oColor         = vec3(236, 177, 89) / 255.0;
  oColor = oNormal * 0.5 + 0.5;

  // oColor = voxNormal;

  oIter    = iter;
  oVoxHash = voxHash;
  oT       = t_min;

  return scale < STACK_SIZE && t_min <= t_max;
}

vec3 dayLightCalc(vec3 d) {
  float sunAngle  = environmentUbo.data.sunAngle * kDeg2Rad;
  float sunSize   = environmentUbo.data.sunSize;
  float angleDiff = max(0, pow(dot(d, vec3(sin(sunAngle), cos(sunAngle), 0)), sunSize));
  return environmentUbo.data.sunLuminance * environmentUbo.data.sunColor * angleDiff;
}

// subpixOffset ranges from -0.5 to 0.5
void rayGen(out vec3 o, out vec3 d, vec2 subpixOffset) {
  vec2 screenSpaceUv = (vec2(gl_GlobalInvocationID.xy) + vec2(0.5) + subpixOffset) /
                       vec2(renderInfoUbo.data.lowResSize);
  o = renderInfoUbo.data.camPosition;
  d = normalize(projectScreenUvToWorldCamFarPoint(screenSpaceUv, false) -
                renderInfoUbo.data.camPosition);
}

uvec3 getSeed() {
  return uvec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, renderInfoUbo.data.currentSample);
}

vec3 traceTerminate(uvec3 seed, vec3 o, vec3 d, uint chunkBufferOffset) {
  vec3 surfacePos, tracingPos, color, normal;
  uint iter, voxHash;
  bool lightSourceHit;
  float tMin;
  bool hit = detailedMarching(tMin, surfacePos, tracingPos, color, normal, iter, voxHash,
                              lightSourceHit, o, d, chunkBufferOffset);
  if (!hit) {
    return dayLightCalc(d);
  }

  if (lightSourceHit) {
    return color;
  }

  return vec3(0);
}

vec3 traceSecondary(uvec3 seed, vec3 o, vec3 d, uint chunkBufferOffset) {
  vec3 surfacePos, tracingPos, color, normal;
  uint iter, voxHash;
  bool lightSourceHit;
  float tMin;
  bool hit = detailedMarching(tMin, surfacePos, tracingPos, color, normal, iter, voxHash,
                              lightSourceHit, o, d, chunkBufferOffset);
  if (!hit) {
    return dayLightCalc(d);
  }

  if (lightSourceHit) {
    return color;
  }

  // only consider direct lighting
  if (!twickableParametersUbo.data.traceSecondaryRay) {
    return vec3(0);
  }

  vec3 indirectRayDir = randomCosineWeightedHemispherePoint(normal, seed, BaseDisturbance(0), true);
  float pdf           = dot(indirectRayDir, normal) / kPi;
  vec3 brdf           = kInvPi * color;

  return traceTerminate(seed, tracingPos, indirectRayDir, chunkBufferOffset) * brdf *
         dot(indirectRayDir, normal) / pdf;

  return vec3(0);
}

// most of the return value is only valid if hit, except for oPrimaryRayIterUsed
bool tracePrimary(out float oT, out uint oPrimaryRayIterUsed, out vec3 oColor, out vec3 oPosition,
                  out vec3 oNormal, out uint oVoxHash, uvec3 seed, vec3 o, vec3 d,
                  uint chunkBufferOffset, float optimizedDistance, vec3 originOffset) {
  o += d * optimizedDistance + originOffset;

  vec3 surfacePos, tracingPos, color, normal;
  uint iter, voxHash;
  bool lightSourceHit;
  float tMin;
  bool hit            = detailedMarching(tMin, surfacePos, tracingPos, color, normal, iter, voxHash,
                                         lightSourceHit, o, d, chunkBufferOffset);
  oPrimaryRayIterUsed = iter;

  if (!hit) {
    return false;
  }

  oPosition = surfacePos - originOffset;
  oNormal   = normal;
  oVoxHash  = voxHash;
  oT        = tMin + optimizedDistance;

  if (lightSourceHit) {
    oColor = color;
    return true;
  }

  vec3 indirectRayDir = randomCosineWeightedHemispherePoint(normal, seed, BaseDisturbance(1), true);
  float pdf           = dot(indirectRayDir, normal) / kPi;
  vec3 brdf           = kInvPi * color;

  oColor = traceSecondary(seed, tracingPos, indirectRayDir, chunkBufferOffset) * brdf *
           dot(indirectRayDir, normal) / pdf;

  return true;
}

#define USE_BRANCHLESS_DDA true
#define MAX_DDA_ITERATION 100

bool getVoxel(ivec3 pos) { return imageLoad(chunksImage, pos).x > 0; }

// branchless DDA
// originally from https://www.shadertoy.com/view/4dX3zl
// my fork: https://www.shadertoy.com/view/l3fXWH
bool hitChunk(out ivec3 oHitChunkPosOffset, out uvec3 oHitChunkLookupOffset, uint skippingNum,
              vec3 o, vec3 d) {
  oHitChunkPosOffset    = ivec3(0);
  oHitChunkLookupOffset = uvec3(0);

  ivec3 mapPos   = ivec3(floor(o));
  vec3 deltaDist = 1.0 / abs(d);
  ivec3 rayStep  = ivec3(sign(d));
  vec3 sideDist  = (((sign(d) * 0.5) + 0.5) + sign(d) * (vec3(mapPos) - o)) * deltaDist;

  bvec3 mask;
  for (int i = 0; i <= MAX_DDA_ITERATION; i++) {
    if (i >= skippingNum && getVoxel(mapPos + ivec3((sceneInfoBuffer.data.chunksDim - 1) / 2))) {
      oHitChunkPosOffset    = mapPos;
      oHitChunkLookupOffset = mapPos + ivec3((sceneInfoBuffer.data.chunksDim - 1) / 2);
    }

    if (i == MAX_DDA_ITERATION) {
      mask = bvec3(false);
      return false;
    }

    // hereby "branchless"
    mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));
    sideDist += vec3(mask) * deltaDist;
    mapPos += ivec3(vec3(mask)) * rayStep;
  }
}

void main() {
  ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
  if (any(greaterThanEqual(uv, ivec2(renderInfoUbo.data.lowResSize)))) {
    return;
  }

  // seed gen
  uvec3 seed = getSeed();

  // ray gen
  vec3 o, d;
  // (-0.5, 0.5)
  vec2 subpixOffset = twickableParametersUbo.data.taa ? renderInfoUbo.data.subpixOffset : vec2(0);
  rayGen(o, d, subpixOffset);

  ivec3 hitChunkOffset;
  uvec3 hitChunkLookupOffset;
  uint skippingNum = 0;
  bool hitVoxel    = false;
  vec3 position, color;
  uint primaryRayIterUsed = 0;
  while (hitChunk(hitChunkOffset, hitChunkLookupOffset, skippingNum, o, d)) {
    // don't forget to de-offset by one, since 0 is used to encode the empty space
    uint chunkBufferOffset = imageLoad(chunksImage, ivec3(hitChunkLookupOffset)).x - 1;

    float optimizedDistance = 0;

    // beam optimization
    // if (twickableParametersUbo.data.beamOptimization) {
    //   ivec2 beamUv      = ivec2(gl_GlobalInvocationID.xy / sceneInfoBuffer.data.beamResolution);
    //   float t1          = imageLoad(beamDepthImage, beamUv).r;
    //   float t2          = imageLoad(beamDepthImage, beamUv + ivec2(1, 0)).r;
    //   float t3          = imageLoad(beamDepthImage, beamUv + ivec2(0, 1)).r;
    //   float t4          = imageLoad(beamDepthImage, beamUv + ivec2(1, 1)).r;
    //   float t           = min(min(t1, t2), min(t3, t4));
    //   optimizedDistance = t;
    // }

    // preOffset is to offset the octree tracing position, which works best with the range of [1, 2]
    const ivec3 preOffset = ivec3(1);

    uint voxHash;
    vec3 normal;
    float tMin;
    hitVoxel = tracePrimary(tMin, primaryRayIterUsed, color, position, normal, voxHash, seed, o, d,
                            chunkBufferOffset, optimizedDistance, preOffset - hitChunkOffset);

    if (hitVoxel) {
      imageStore(positionImage, uv, vec4(position, 0));
      imageStore(normalImage, uv, uvec4(packNormal(normal), 0, 0, 0));
      imageStore(voxHashImage, uv, uvec4(voxHash, 0, 0, 0));
      imageStore(depthImage, uv, vec4(tMin, 0, 0, 0));
      break;
    }

    // if the voxel is not hit, we need to continue the ray to trace along chunks
    skippingNum += 1;
  }

  if (!hitVoxel) {
    position = o + d * 1e10;
    color    = dayLightCalc(d);
    // keep the primaryRayIterUsed unchanged, since unhit voxels are also counted
  }

  // calculate the motion here avoids a store - load cycle for the position, and the motion vector
  // can be reused in temporal filter and the taa filter, also, using a motion vector is easier for
  // us to handle moving objects in the future
  vec2 pUv01 = projectWorldPosToScreenUv(position, true);
  vec2 uv01  = projectWorldPosToScreenUv(position, false);
  // the motion vector points to the previous frame, and is normalized
  vec2 motion = pUv01 - uv01;

  imageStore(hitImage, uv, uvec4(hitVoxel ? 1 : 0, 0, 0, 0));
  imageStore(motionImage, uv, vec4(motion, 0, 0));

  uint packedColor = packRGBE(color);
  if (hitVoxel) {
    imageStore(rawImage, uv, uvec4(packedColor, 0, 0, 0));
  } else {
    imageStore(backgroundImage, uv, uvec4(packedColor, 0, 0, 0));
  }

  vec3 overlappingColor = vec3(1, 0.4, 0.2) * float(primaryRayIterUsed) * 0.02;
  imageStore(octreeVisualizationImage, uv, uvec4(packRGBE(overlappingColor), 0, 0, 0));
}

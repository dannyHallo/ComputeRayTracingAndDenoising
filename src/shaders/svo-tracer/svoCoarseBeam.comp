#version 450
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "../include/svoTracerDescriptorSetLayouts.glsl"

#include "../include/definitions.glsl"
#include "../include/projection.glsl"

const uint STACK_SIZE = 23;
struct StackItem {
  uint node;
  float t_max;
} stack[STACK_SIZE + 1];

// this algorithm is from here:
// https://research.nvidia.com/sites/default/files/pubs/2010-02_Efficient-Sparse-Voxel/laine2010tr1_paper.pdf

// code reference:
// https://code.google.com/archive/p/efficient-sparse-voxel-octrees/
// https://github.com/AdamYuan/SparseVoxelOctree

// design decisions:
// 1. the position range of the octree is [1, 2], because the POP function need that bit
// comparison from the floating points ranged from [0, 1]
// 2. the traversing reduces branching by mirroring the coordinate system
// 3. all eight childrens are stored if at least one is active, so the parent node masks only need
// two bits (isLeaf and hasChild), this is different from the paper, which needs 16 bits for
// that

bool coarseMarching(out float oT, out float oSize, vec3 o, vec3 d, float orig_sz, float dir_sz) {
  // avoid division by zero
  d = max(abs(d), vec3(kEpsilon)) * sign(d);

  vec3 t_coef = 1.0f / -abs(d);
  vec3 t_bias = t_coef * o;

  uint oct_mask = 0u;
  if (d.x > 0.0f) oct_mask ^= 1u, t_bias.x = 3.0f * t_coef.x - t_bias.x;
  if (d.y > 0.0f) oct_mask ^= 2u, t_bias.y = 3.0f * t_coef.y - t_bias.y;
  if (d.z > 0.0f) oct_mask ^= 4u, t_bias.z = 3.0f * t_coef.z - t_bias.z;

  // initialize the active span of t-values
  float t_min =
      max(max(2.0f * t_coef.x - t_bias.x, 2.0f * t_coef.y - t_bias.y), 2.0f * t_coef.z - t_bias.z);
  float t_max = min(min(t_coef.x - t_bias.x, t_coef.y - t_bias.y), t_coef.z - t_bias.z);
  t_min       = max(t_min, 0.0f);
  float h     = t_max;

  uint parent = 0u;
  uint cur    = 0u;
  vec3 pos    = vec3(1.0f);
  uint idx    = 0u;
  if (1.5f * t_coef.x - t_bias.x > t_min) idx ^= 1u, pos.x = 1.5f;
  if (1.5f * t_coef.y - t_bias.y > t_min) idx ^= 2u, pos.y = 1.5f;
  if (1.5f * t_coef.z - t_bias.z > t_min) idx ^= 4u, pos.z = 1.5f;

  uint scale       = STACK_SIZE - 1;
  float scale_exp2 = 0.5f; // exp2( scale - STACK_SIZE )

  while (scale < STACK_SIZE) {
    if (cur == 0u) cur = octreeBuffer[parent + (idx ^ oct_mask)];

    vec3 t_corner = pos * t_coef - t_bias;
    float tc_max  = min(min(t_corner.x, t_corner.y), t_corner.z);

    if ((cur & 0x80000000u) != 0 && t_min <= t_max) {
      if (orig_sz + tc_max * dir_sz >= scale_exp2) break;

      // INTERSECT
      float tv_max          = min(t_max, tc_max);
      float half_scale_exp2 = scale_exp2 * 0.5f;
      vec3 t_center         = half_scale_exp2 * t_coef + t_corner;

      if (t_min <= tv_max) {
        if ((cur & 0x40000000u) != 0) break;

        // PUSH
        if (tc_max < h) {
          stack[scale].node  = parent;
          stack[scale].t_max = t_max;
        }
        h = tc_max;

        parent = cur & 0x3fffffffu;

        idx = 0u;
        --scale;
        scale_exp2 = half_scale_exp2;
        if (t_center.x > t_min) idx ^= 1u, pos.x += scale_exp2;
        if (t_center.y > t_min) idx ^= 2u, pos.y += scale_exp2;
        if (t_center.z > t_min) idx ^= 4u, pos.z += scale_exp2;

        cur   = 0;
        t_max = tv_max;

        continue;
      }
    }

    // ADVANCE
    uint step_mask = 0u;
    if (t_corner.x <= tc_max) step_mask ^= 1u, pos.x -= scale_exp2;
    if (t_corner.y <= tc_max) step_mask ^= 2u, pos.y -= scale_exp2;
    if (t_corner.z <= tc_max) step_mask ^= 4u, pos.z -= scale_exp2;

    // update active t-span and flip bits of the child slot index
    t_min = tc_max;
    idx ^= step_mask;

    // proceed with pop if the bit flips disagree with the ray direction
    if ((idx & step_mask) != 0) {
      // POP
      // find the highest differing bit between the two positions
      uint differing_bits = 0;
      if ((step_mask & 1u) != 0)
        differing_bits |= floatBitsToUint(pos.x) ^ floatBitsToUint(pos.x + scale_exp2);
      if ((step_mask & 2u) != 0)
        differing_bits |= floatBitsToUint(pos.y) ^ floatBitsToUint(pos.y + scale_exp2);
      if ((step_mask & 4u) != 0)
        differing_bits |= floatBitsToUint(pos.z) ^ floatBitsToUint(pos.z + scale_exp2);
      scale      = findMSB(differing_bits);
      scale_exp2 = uintBitsToFloat((scale - STACK_SIZE + 127u) << 23u); // exp2f(scale - s_max)

      // restore parent voxel from the stack
      parent = stack[scale].node;
      t_max  = stack[scale].t_max;

      // round cube position and extract child slot index
      uint shx = floatBitsToUint(pos.x) >> scale;
      uint shy = floatBitsToUint(pos.y) >> scale;
      uint shz = floatBitsToUint(pos.z) >> scale;
      pos.x    = uintBitsToFloat(shx << scale);
      pos.y    = uintBitsToFloat(shy << scale);
      pos.z    = uintBitsToFloat(shz << scale);
      idx      = (shx & 1u) | ((shy & 1u) << 1u) | ((shz & 1u) << 2u);

      // prevent same parent from being stored again and invalidate cached child descriptor
      h = 0.0f, cur = 0;
    }
  }

  // oT is the t value that the ray hits the octree
  oT = t_min;
  // in case of the voxel is rotated, we need the size info to estimate the worst case
  oSize = scale_exp2;
  return scale < STACK_SIZE && t_min <= t_max;
}

vec3 rayGen(vec2 beamOffset) {
  vec2 screenSpaceUv =
      ((vec2(gl_GlobalInvocationID.xy + beamOffset) * sceneInfoBuffer.data.beamResolution) +
       vec2(0.5)) /
      vec2(renderInfoUbo.data.lowResSize);
  return normalize(projectScreenUvToWorldCamFarPoint(screenSpaceUv, false) -
                   renderInfoUbo.data.camPosition);
}

// x and y are normalized, the function calculates the tangent value of the
// angle between them
float rayTangent(in vec3 x, in vec3 y) {
  // dot(x, y) = cos(theta) * |x| * |y| = cos(theta)
  float c = dot(x, y);
  // sin(theta) = sqrt(1 - cos(theta)^2)
  // abs is used to assure the result is positive (x and y might be in opposite,
  // but they should not be in the following usecase, so it might be redundant)
  return sqrt(1.0 - c * c) / abs(c);
}

void main() {
  ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
  if (uv.x >= imageSize(beamDepthImage).x || uv.y >= imageSize(beamDepthImage).y) {
    return;
  }

  vec3 d = rayGen(vec2(0));
  vec3 o = renderInfoUbo.data.camPosition;

  float t0 = rayTangent(d, rayGen(vec2(0.5, 0.5)));
  float t1 = rayTangent(d, rayGen(vec2(-0.5, 0.5)));
  float t2 = rayTangent(d, rayGen(vec2(0.5, -0.5)));
  float t3 = rayTangent(d, rayGen(vec2(-0.5, -0.5)));
  // the dir_sz is the size growth in regarding to how far the ray moves
  float dirSz = 2.0 * max(max(t0, t1), max(t2, t3));

  float t, size;
  float lowestLevelVoxSize = exp2(1.0 - sceneInfoBuffer.data.voxelLevelCount);

  bool hit   = coarseMarching(t, size, o, d, lowestLevelVoxSize, dirSz);
  float dist = hit ? max(0.0, t - size) : 1e10;
  imageStore(beamDepthImage, uv, vec4(dist, 0, 0, 0));
}

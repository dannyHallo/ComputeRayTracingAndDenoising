#version 450
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "include/svoTracerDescriptorSetLayouts.glsl"

#include "include/definitions.glsl"
#include "include/random.glsl"

// standard 3x3 filtering kernel from q2rtx
const float waveletFac      = 0.5;
const float kernel3x3[2][2] = {{1.0, waveletFac}, {waveletFac, waveletFac *waveletFac}};

vec2 gradientAtUv;
vec3 normalAtUv;
vec3 colorAtUv;
vec3 positionAtUv;
// float depthAtUv;
// float varianceAtUv;
float luminanceAtUv;

ivec2 jittering(int stepSize) {
  uvec3 seed       = uvec3(gl_GlobalInvocationID.xy, renderInfoUbo.data.currentSample);
  vec2 randomNoise = vec2(random(seed), random(seed));
  randomNoise -= 0.5;
  randomNoise *= 0.5;
  ivec2 jitter = ivec2(randomNoise * stepSize);
  return jitter;
}

void loadDataFromPing(out vec3 oNormal, out vec3 oColor, out vec3 oPosition, out bool oIsSkybox,
                      ivec2 uv) {
  ivec2 bound = ivec2(renderInfoUbo.data.swapchainWidth, renderInfoUbo.data.swapchainHeight);
  if (any(lessThan(uv, ivec2(0))) || any(greaterThanEqual(uv, bound))) {
    uv =
        clamp(uv, ivec2(0),
              ivec2(renderInfoUbo.data.swapchainWidth - 1, renderInfoUbo.data.swapchainHeight - 1));
  }
  vec4 normal = imageLoad(normalImage, uv);
  oNormal     = normal.xyz;
  oColor      = imageLoad(aTrousPingImage, uv).xyz;
  oPosition   = imageLoad(positionImage, uv).xyz;
  oIsSkybox   = normal.w == 0;
  // oDepth  = imageLoad(depthImage, uv).x;
  // oVariance = imageLoad(varianceImage, uv).x;
}

void loadDataFromPong(out vec3 oNormal, out vec3 oColor, out vec3 oPosition, out bool oIsSkybox,
                      ivec2 uv) {
  ivec2 bound = ivec2(renderInfoUbo.data.swapchainWidth, renderInfoUbo.data.swapchainHeight);
  if (any(lessThan(uv, ivec2(0))) || any(greaterThanEqual(uv, bound))) {
    uv =
        clamp(uv, ivec2(0),
              ivec2(renderInfoUbo.data.swapchainWidth - 1, renderInfoUbo.data.swapchainHeight - 1));
  }
  vec4 normal = imageLoad(normalImage, uv);
  oNormal     = normal.xyz;
  oColor      = imageLoad(aTrousPongImage, uv).xyz;
  oPosition   = imageLoad(positionImage, uv).xyz;
  oIsSkybox   = normal.w == 0;
  // oDepth  = imageLoad(depthImage, uv).x;
  // oVariance = imageLoad(varianceImage, uv).x;
}

void blurKernel(inout float weightSum, inout vec4 sumOfWeightedValues, ivec2 uv, ivec2 dispatchXY,
                int kernalHalfSize, uint currentIteration) {
  int stepSize   = 1 << currentIteration;
  ivec2 offsetXY = dispatchXY * stepSize;
  if (spatialFilterInfoUbo.data.useJittering && dispatchXY != ivec2(0)) {
    offsetXY += jittering(stepSize);
  }

  float weightK = kernel3x3[abs(dispatchXY.x)][abs(dispatchXY.y)];

  if (dispatchXY == ivec2(0)) {
    float weight = weightK;
    weight       = clamp(weight, 0, 1);
    weightSum += weight;
    sumOfWeightedValues += weight * vec4(colorAtUv, 1);
    return;
  }

  vec2 gradientAtSample;
  vec3 normalAtSample;
  vec3 colorAtSample;
  vec3 positionAtSample;
  bool isSkybox;
  // float depthAtSample;
  // float varianceAtSample;
  // first load from ping
  if (currentIteration % 2 == 0) {
    loadDataFromPing(normalAtSample, colorAtSample, positionAtSample, isSkybox, uv + offsetXY);
  } else {
    loadDataFromPong(normalAtSample, colorAtSample, positionAtSample, isSkybox, uv + offsetXY);
  }

  // WEIGHT_C
  float phiC = spatialFilterInfoUbo.data.phiC;
  if (spatialFilterInfoUbo.data.changingLuminancePhi) {
    phiC *= pow(2, -currentIteration);
  }

  float luminanceAtSample = dot(kRgbToLuminanceMat, colorAtSample);
  float colDiff           = abs(luminanceAtSample - luminanceAtUv);
  // if (spatialFilterInfoUbo.data.useVarianceGuidedFiltering != 0) {
  //   phiC *= 100.;
  //   weightC = exp(-colDiff / max(phiC * sqrt(varianceAtUv), kEpsilon));
  // } else {
  float weightC = exp(-colDiff / phiC);
  // }
  if (spatialFilterInfoUbo.data.ignoreLuminanceAtFirstIteration && currentIteration == 0) {
    weightC = 1.0;
  }

  // WEIGHT_N
  float weightN = max(0., pow(dot(normalAtUv, normalAtSample), spatialFilterInfoUbo.data.phiN));

  // WEIGHT_P
  float weightP = exp(-distance(positionAtSample, positionAtUv) / spatialFilterInfoUbo.data.phiP);

  // float differenceInDepth = 0;
  // // using gradient here can better blend samples within a single screen space tilted mesh
  // //   differenceInDepth = abs((depthAtUv - depthAtSample) - dot(gradientAtUv,
  // vec2(offsetXY))); differenceInDepth = abs(depthAtUv - depthAtSample);

  // float weightZ = exp(-differenceInDepth / spatialFilterInfoUbo.data.phiDepth);

  float weight = weightK * weightC * weightN * weightP;

  weightSum += weight;
  sumOfWeightedValues += weight * vec4(colorAtSample, 1);
}

void main() {
  ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
  if (uv.x >= renderInfoUbo.data.swapchainWidth || uv.y >= renderInfoUbo.data.swapchainHeight) {
    return;
  }

  uint currentIteration = aTrousIterationBuffer.data;
  if (currentIteration >= spatialFilterInfoUbo.data.aTrousIterationCount) {
    // no A-Trous at all: just copy the input to the output
    if (currentIteration == 0) {
      vec4 color = imageLoad(aTrousPingImage, uv);
      imageStore(aTrousFinalResultImage, uv, color);
      imageStore(accumedImage, uv, color);
    }
    return;
  }

  bool isSkybox;
  if (currentIteration % 2 == 0) {
    loadDataFromPing(normalAtUv, colorAtUv, positionAtUv, isSkybox, uv);
  } else {
    loadDataFromPong(normalAtUv, colorAtUv, positionAtUv, isSkybox, uv);
  }

  luminanceAtUv = dot(kRgbToLuminanceMat, colorAtUv);

  // if (spatialFilterInfoUbo.data.bypassBluring || aTrousIterationsInfo.data >=
  // aTrousIterationsInfo.dataCap) {
  //   if (aTrousIterationsInfo.data == 0) {
  //     imageStore(accumTex, uv, vec4(colorAtUv, 1));
  //   }
  //   imageStore(aTrousOutputTex, uv, vec4(colorAtUv, 1));
  //   return;
  // }

  vec4 weightedColor;
  // sky culling
  if (isSkybox) {
    weightedColor = vec4(colorAtUv, 1);
  } else {
    const int kernalHalfSize = 1;
    float weightSum          = 0;
    vec4 sumOfWeightedValues = vec4(0);
    for (int indexX = -kernalHalfSize; indexX <= kernalHalfSize; indexX++) {
      for (int indexY = -kernalHalfSize; indexY <= kernalHalfSize; indexY++) {
        blurKernel(weightSum, sumOfWeightedValues, uv, ivec2(indexX, indexY), kernalHalfSize,
                   currentIteration);
      }
    }
    weightedColor = sumOfWeightedValues / weightSum;
  }

  if (currentIteration == 0) {
    imageStore(accumedImage, uv, weightedColor);
  }

  // dump image
  if (currentIteration == spatialFilterInfoUbo.data.aTrousIterationCount - 1) {
    imageStore(aTrousFinalResultImage, uv, weightedColor);
    return;
  }
  if (currentIteration % 2 == 0) {
    imageStore(aTrousPongImage, uv, weightedColor);
  } else {
    imageStore(aTrousPingImage, uv, weightedColor);
  }
}
